#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 03/11/2021 11:08:08
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;
using DANMIS_NEW.Interface;
using DANMIS_NEW.Models;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using ResourceLibrary;

namespace DANMIS_NEW.Manager
{
    public class BadProjectDataManager : IBadProjectDataManager
    {
        readonly IBadProjectDataRepository _badProjectDataRepository;

        public BadProjectDataManager(IBadProjectDataRepository badProjectDataRepository)
        {
            _badProjectDataRepository = badProjectDataRepository;
        }

        /// <summary>
        /// 建立 BadProjectData
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(BadProjectDataViewModel entity)
        {
            var item = (BadProjectData)entity;

            using (var transaction = _badProjectDataRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    _badProjectDataRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 BadProjectData
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _badProjectDataRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _badProjectDataRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _badProjectDataRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 BadProjectData
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public BadProjectDataViewModel GetByID(Guid id)
        {
            var item = _badProjectDataRepository.GetByID(id);
            var result = (BadProjectDataViewModel)item;

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<BadProjectDataListResult> Paging(BadProjectDataSearchModel searchModel)
        {
            // 預設集合
            var temp = _badProjectDataRepository.GetAll();

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new BadProjectDataListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 ProjectName = x.ProjectName,
                                 StartDate = x.StartDate,
                                 CompleteDate = x.CompleteDate,
                                 ProjectStatus = x.ProjectStatus,
                                 ProjectOwnerID = x.ProjectOwnerID,
                                 OwnerEmail = x.OwnerEmail,
                                 PortfolioName = x.PortfolioName,
                                 PortfolioOwnerID = x.PortfolioOwnerID,
                                 ProgramName = x.ProgramName,
                                 ProgramOwnerID = x.ProgramOwnerID,
                                 CurrencyINR = x.CurrencyINR,
                                 Budget = x.Budget,
                                 Benefit = x.Benefit,
                                 ClientName = x.ClientName,
                                 LineofBusiness = x.LineofBusiness,
                                 Region = x.Region,
                                 BrandName = x.BrandName,
                                 Market = x.Market,
                                 Office = x.Office,
                                 Chargeable = x.Chargeable,
                                 Commission = x.Commission,
                                 GroupName = x.GroupName,
                                 AccProjID = x.AccProjID,
                                 LegalEntity = x.LegalEntity,
                                 FinSourSys = x.FinSourSys,
                                 CRMURNID = x.CRMURNID,
                                 CRMSourSys = x.CRMSourSys,
                                 OtherSource = x.OtherSource,
                                 AdditionalProjectID = x.AdditionalProjectID,
                                 RecordStatus = x.RecordStatus,
                                 ImportDate = x.ImportDate,
                                 UploadDate = x.UploadDate,
                                 ImportUniqNo = x.ImportUniqNo,
                                 ImportLocName = x.ImportLocName,
                                 ImportEngName = x.ImportEngName,
                                 UploadUniqNo = x.UploadUniqNo,
                                 UploadLocName = x.UploadLocName,
                                 UploadEngName = x.UploadEngName,
                                 CompareDate = x.CompareDate,
                                 CompareUniqNo = x.CompareUniqNo,
                                 CompareLocName = x.CompareLocName,
                                 CompareEngName = x.CompareEngName,
                             };

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.ProjectName.Contains(search) ||
                    x.StartDate.Contains(search) ||
                    x.CompleteDate.Contains(search) ||
                    x.ProjectStatus.Contains(search) ||
                    x.ProjectOwnerID.Contains(search) ||
                    x.OwnerEmail.Contains(search) ||
                    x.PortfolioName.Contains(search) ||
                    x.PortfolioOwnerID.Contains(search) ||
                    x.ProgramName.Contains(search) ||
                    x.ProgramOwnerID.Contains(search) ||
                    x.CurrencyINR.Contains(search) ||
                    x.Budget.Contains(search) ||
                    x.Benefit.Contains(search) ||
                    x.ClientName.Contains(search) ||
                    x.LineofBusiness.Contains(search) ||
                    x.Region.Contains(search) ||
                    x.BrandName.Contains(search) ||
                    x.Market.Contains(search) ||
                    x.Office.Contains(search) ||
                    x.Chargeable.Contains(search) ||
                    x.Commission.Contains(search) ||
                    x.GroupName.Contains(search) ||
                    x.AccProjID.Contains(search) ||
                    x.LegalEntity.Contains(search) ||
                    x.FinSourSys.Contains(search) ||
                    x.CRMURNID.Contains(search) ||
                    x.CRMSourSys.Contains(search) ||
                    x.OtherSource.Contains(search) ||
                    x.AdditionalProjectID.Contains(search) ||
                    x.RecordStatus.Contains(search) ||
                    x.ImportLocName.Contains(search) ||
                    x.ImportEngName.Contains(search) ||
                    x.UploadLocName.Contains(search) ||
                    x.UploadEngName.Contains(search) ||
                    x.CompareLocName.Contains(search) ||
                    x.CompareEngName.Contains(search) ||
                    false);
            }

            // 進行分頁處理
            var result = new Paging<BadProjectDataListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            return result;
        }

        /// <summary>
        /// 更新 BadProjectData
        /// </summary>
        /// <param name="entity"></param>
        public void Update(BadProjectDataViewModel entity)
        {
            using (var transaction = _badProjectDataRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _badProjectDataRepository.GetByID(entity.ID);
                    source.ProjectName = entity.ProjectName ?? string.Empty;
                    source.StartDate = entity.StartDate ?? string.Empty;
                    source.CompleteDate = entity.CompleteDate ?? string.Empty;
                    source.Description = entity.Description ?? string.Empty;
                    source.ProjectStatus = entity.ProjectStatus ?? string.Empty;
                    source.ProjectOwnerID = entity.ProjectOwnerID ?? string.Empty;
                    source.OwnerEmail = entity.OwnerEmail ?? string.Empty;
                    source.PortfolioName = entity.PortfolioName ?? string.Empty;
                    source.PortfolioOwnerID = entity.PortfolioOwnerID ?? string.Empty;
                    source.ProgramName = entity.ProgramName ?? string.Empty;
                    source.ProgramOwnerID = entity.ProgramOwnerID ?? string.Empty;
                    source.CurrencyINR = entity.CurrencyINR ?? string.Empty;
                    source.Budget = entity.Budget ?? string.Empty;
                    source.Benefit = entity.Benefit ?? string.Empty;
                    source.ClientName = entity.ClientName ?? string.Empty;
                    source.LineofBusiness = entity.LineofBusiness ?? string.Empty;
                    source.Region = entity.Region ?? string.Empty;
                    source.BrandName = entity.BrandName ?? string.Empty;
                    source.Market = entity.Market ?? string.Empty;
                    source.Office = entity.Office ?? string.Empty;
                    source.Chargeable = entity.Chargeable ?? string.Empty;
                    source.Commission = entity.Commission ?? string.Empty;
                    source.GroupName = entity.GroupName ?? string.Empty;
                    source.AccProjID = entity.AccProjID ?? string.Empty;
                    source.LegalEntity = entity.LegalEntity ?? string.Empty;
                    source.FinSourSys = entity.FinSourSys ?? string.Empty;
                    source.CRMURNID = entity.CRMURNID ?? string.Empty;
                    source.CRMSourSys = entity.CRMSourSys ?? string.Empty;
                    source.OtherSource = entity.OtherSource ?? string.Empty;
                    source.AdditionalProjectID = entity.AdditionalProjectID ?? string.Empty;
                    source.RecordStatus = entity.RecordStatus ?? string.Empty;
                    source.ImportDate = entity.ImportDate;
                    source.UploadDate = entity.UploadDate;
                    source.ImportUniqNo = entity.ImportUniqNo;
                    source.ImportLocName = entity.ImportLocName ?? string.Empty;
                    source.ImportEngName = entity.ImportEngName ?? string.Empty;
                    source.UploadUniqNo = entity.UploadUniqNo;
                    source.UploadLocName = entity.UploadLocName ?? string.Empty;
                    source.UploadEngName = entity.UploadEngName ?? string.Empty;
                    source.CompareDate = entity.CompareDate;
                    source.CompareUniqNo = entity.CompareUniqNo;
                    source.CompareLocName = entity.CompareLocName ?? string.Empty;
                    source.CompareEngName = entity.CompareEngName ?? string.Empty;

                    _badProjectDataRepository.Update(source);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 取得 BadProjectData
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<BadProjectDataViewModel> GetAll()
        {
            var result = _badProjectDataRepository.GetAll().ToList().ConvertAll(e => (BadProjectDataViewModel)e);

            return result;
        }
    }
}
#pragma warning restore 1591