#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 03/04/2021 15:24:31
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;
using DANMIS_NEW.Interface;
using DANMIS_NEW.Models;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using ResourceLibrary;
using Excel = Microsoft.Office.Interop.Excel;       //microsoft Excel 14 object in references-> COM tab
using System.Runtime.InteropServices;

namespace DANMIS_NEW.Manager
{
    public class ProjectDataManager : IProjectDataManager
    {
        public static int year = Convert.ToInt32(DateTime.Now.Year.ToString().Substring(2, 2));

        PSEntities PSEntities = new PSEntities();

        readonly IProjectDataRepository _projectDataRepository;
        readonly IWorkfrontImportRepository _workfrontImportRepository;
        readonly IBrandDataRepository _brandDataRepository;
        readonly IBadProjectDataRepository _badProjectDataRepository;
        readonly IWorkfrontReportRepository _workfrontReportRepository;
        readonly INonChargeableRepository _nonChargeableRepository;

        public ProjectDataManager(IProjectDataRepository projectDataRepository, IBrandDataRepository brandDataRepository, IWorkfrontImportRepository workfrontImportRepository,
                                  IBadProjectDataRepository badProjectDataRepository, IWorkfrontReportRepository workfrontReportRepository, INonChargeableRepository nonChargeableRepository)
        {
            _projectDataRepository = projectDataRepository;
            _brandDataRepository = brandDataRepository;
            _workfrontImportRepository = workfrontImportRepository;
            _badProjectDataRepository = badProjectDataRepository;
            _workfrontReportRepository = workfrontReportRepository;
            _nonChargeableRepository = nonChargeableRepository;
        }
        

        /// <summary>
        /// 建立 ProjectData
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(ProjectDataViewModel entity)
        {
            var item = (ProjectData)entity;

            using (var transaction = _projectDataRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    
                    item.ImportType = "Manual";
                    item.RecordStatus = "NEW";
                    item.ProjectID = GetNewProjectID(entity.BrandName);
                    item.MediaType = ConvertMediaType(item.MediaType);
                    item.ProjectStatus = ConvertProjectStatus(item.ProjectStatus);
                    item.ProjectType = ConvertProjectType(item.ProjectType);
                    item.Chargeable = ConvertChargeable(item.Chargeable);
                    item.CompareDate = DateTime.Now;
                    item.ImportDate = DateTime.Now;
                    item.UploadDate = DateTime.Now;
                    _projectDataRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 ProjectData
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _projectDataRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _projectDataRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _projectDataRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 ProjectData
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ProjectDataViewModel GetByID(Guid id)
        {
            var item = _projectDataRepository.GetByID(id);
            item.MediaType = ConvertMediaType(item.MediaType);
            item.ProjectStatus = ConvertProjectStatus(item.ProjectStatus);
            item.ProjectType = ConvertProjectType(item.ProjectType);
            item.Chargeable = ConvertChargeable(item.Chargeable);
            var result = (ProjectDataViewModel)item;

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<ProjectDataListResult> Paging(ProjectDataSearchModel searchModel)
        {
            var isChargeable = ConvertChargeable(searchModel.IsChargeable);
            var projectStatus = ConvertProjectStatus(searchModel.Status);

            var projectType = ConvertProjectType(searchModel.ProjectType);

            var result = new Paging<ProjectDataListResult>();

            var _selLoc = _projectDataRepository.GetAll();
            var tempResult = ConvertToProjectDataListResult(_selLoc);

            #region 篩選
            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.ProjectName.Contains(search) ||
                    x.StartDate.Contains(search) ||
                    x.CompleteDate.Contains(search) ||
                    x.ProjectStatus.Contains(search) ||
                    x.ProjectOwnerID.Contains(search) ||
                    x.OwnerEmail.Contains(search) ||
                    x.PortfolioName.Contains(search) ||
                    x.PortfolioOwnerID.Contains(search) ||
                    x.ProgramName.Contains(search) ||
                    x.ProgramOwnerID.Contains(search) ||
                    x.CurrencyINR.Contains(search) ||
                    x.Budget.Contains(search) ||
                    x.Benefit.Contains(search) ||
                    x.ClientName.Contains(search) ||
                    x.LineofBusiness.Contains(search) ||
                    x.Region.Contains(search) ||
                    x.BrandName.Contains(search) ||
                    x.Market.Contains(search) ||
                    x.Office.Contains(search) ||
                    x.Chargeable.Contains(search) ||
                    x.Commission.Contains(search) ||
                    x.GroupName.Contains(search) ||
                    x.AccProjID.Contains(search) ||
                    x.LegalEntity.Contains(search) ||
                    x.FinSourSys.Contains(search) ||
                    x.CRMURNID.Contains(search) ||
                    x.CRMSourSys.Contains(search) ||
                    x.OtherSource.Contains(search) ||
                    x.AdditionalProjectID.Contains(search) ||
                    x.RecordStatus.Contains(search) ||
                    x.ImportLocName.Contains(search) ||
                    x.ImportEngName.Contains(search) ||
                    x.UploadLocName.Contains(search) ||
                    x.UploadEngName.Contains(search) ||
                    x.CompareLocName.Contains(search) ||
                    x.CompareEngName.Contains(search) ||
                    false);
            }
            if (searchModel.StartDate != null)
            {
                tempResult = tempResult.Where(x =>
                    x.ImportDate >= searchModel.StartDate ||
                    false);
            }
            if (!string.IsNullOrWhiteSpace(isChargeable))
                tempResult = tempResult.Where(x =>
                    x.Chargeable == isChargeable ||
                    false);
            if (!string.IsNullOrWhiteSpace(projectStatus))
                tempResult = tempResult.Where(x =>
                    x.ProjectStatus == projectStatus ||
                    false);
            if (!string.IsNullOrWhiteSpace(projectType))
                tempResult = tempResult.Where(x =>
                    x.ProjectType == projectType ||
                    false);
            #endregion

            // 進行分頁處理            
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            return result;            
        }

        /// <summary>
        /// 更新 ProjectData
        /// </summary>
        /// <param name="entity"></param>
        public void Update(ProjectDataViewModel entity)
        {
            using (var transaction = _projectDataRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _projectDataRepository.GetByID(entity.ID);
                    source.ProjectName = entity.ProjectName ?? string.Empty;
                    source.StartDate = entity.StartDate ?? string.Empty;
                    source.CompleteDate = entity.CompleteDate ?? string.Empty;
                    source.Description = entity.Description ?? string.Empty;
                    source.ProjectStatus = ConvertProjectStatus(entity.ProjectStatus);
                    source.ProjectOwnerID = entity.ProjectOwnerID ?? string.Empty;
                    source.OwnerEmail = entity.OwnerEmail ?? string.Empty;
                    source.PortfolioName = entity.PortfolioName ?? string.Empty;
                    source.PortfolioOwnerID = entity.PortfolioOwnerID ?? string.Empty;
                    source.ProgramName = entity.ProgramName ?? string.Empty;
                    source.ProgramOwnerID = entity.ProgramOwnerID ?? string.Empty;
                    source.CurrencyINR = entity.CurrencyINR ?? string.Empty;
                    source.Budget = entity.Budget ?? string.Empty;
                    source.Benefit = entity.Benefit ?? string.Empty;
                    source.ClientName = entity.ClientName ?? string.Empty;
                    source.LineofBusiness = entity.LineofBusiness ?? string.Empty;
                    source.Region = entity.Region ?? string.Empty;
                    source.BrandName = entity.BrandName ?? string.Empty;
                    source.Market = entity.Market ?? string.Empty;
                    source.Office = entity.Office ?? string.Empty;
                    source.Chargeable = ConvertChargeable(entity.Chargeable);
                    source.Commission = entity.Commission ?? string.Empty;
                    source.GroupName = entity.GroupName ?? string.Empty;
                    source.AccProjID = entity.AccProjID ?? string.Empty;
                    source.LegalEntity = entity.LegalEntity ?? string.Empty;
                    source.FinSourSys = entity.FinSourSys ?? string.Empty;
                    source.CRMURNID = entity.CRMURNID ?? string.Empty;
                    source.CRMSourSys = entity.CRMSourSys ?? string.Empty;
                    source.OtherSource = entity.OtherSource ?? string.Empty;
                    source.AdditionalProjectID = entity.AdditionalProjectID ?? string.Empty;
                    source.RecordStatus = entity.RecordStatus ?? string.Empty;
                    source.ImportDate = entity.ImportDate;
                    source.UploadDate = DateTime.Now;
                    source.ImportUniqNo = entity.ImportUniqNo;
                    source.ImportLocName = entity.ImportLocName ?? string.Empty;
                    source.ImportEngName = entity.ImportEngName ?? string.Empty;
                    source.UploadUniqNo = entity.UploadUniqNo;
                    source.UploadLocName = entity.UploadLocName ?? string.Empty;
                    source.UploadEngName = entity.UploadEngName ?? string.Empty;
                    source.CompareDate = entity.CompareDate;
                    source.CompareUniqNo = entity.CompareUniqNo;
                    source.CompareLocName = entity.CompareLocName ?? string.Empty;
                    source.CompareEngName = entity.CompareEngName ?? string.Empty;
                    source.MediaType = ConvertMediaType(entity.MediaType);
                    source.ProjectType = ConvertProjectType(entity.ProjectType);
                    _projectDataRepository.Update(source);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        #region CheckDataExist & Insert
        public Paging<ProjectDataListResult> CheckDataExist(ProjectDataSearchModel searchModel)
        {
            var isChargeable = searchModel.IsChargeable == "0" ? "Chargeable" : searchModel.IsChargeable == "1" ? "Non-Chargeable" : null;

            var result = new Paging<ProjectDataListResult>();
            var _tempData = new List<ProjectDataListResult>();            

            var _brandData = _brandDataRepository.GetAll();
            var _selWF = _workfrontImportRepository.GetAll();
            var _selLoc = _projectDataRepository.GetAll();
            
            var brandData = _brandData.ToList();
            var selWF = _selWF.ToList();
            var selLoc = _selLoc.ToList();

            bool wkHave = false;    //Workfront 已新增
            bool lcHave = false;    //本地已新增
            string STARTDATE = string.Concat(DateTime.Now.Date.Year, "-01-01");
            string ENDDATE = string.Concat(DateTime.Now.Date.Year, "-06-30");

            var addItems = new List<ProjectData>();
            var addBadItems = new List<BadProjectData>();

            #region 查詢工作卡的指令
            var cuf0004 = PSEntities.CUF0004;
            var cuf0015 = PSEntities.CUF0015;
            var cuf0016 = PSEntities.CUF0016;
            var cuf0021 = PSEntities.CUF0021;
            var cuf0063 = PSEntities.CUF0063;
            var psf0301 = PSEntities.PSF0301;
            var msf0024 = PSEntities.MSF0024;
            var uuf0001 = PSEntities.UUF0001;
            var wkf0001 = PSEntities.WKF0001.Where(x => (x.CORP_NO == "CT" || x.CORP_NO == "Amnet" || x.CORP_NO == "IP" || x.CORP_NO == "PO" ||
                                                         x.CORP_NO == "WWWINS" || x.CORP_NO == "AAA MEDIA") && x.ENTRY_TIME >= searchModel.StartDate);
            #endregion

            #region 將Caratstation的資料載入記憶體
            // 將 DB 資料轉換為列表頁呈現資料
            var caratstation = from x in wkf0001
                               select new ProjectDataListResult
                               {
                                   SequenceNo = 1,
                                   ID = Guid.NewGuid(),
                                   ProjectName = string.Concat(cuf0015.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO).CUST_ABBR ?? string.Empty, " - ",
                                                               cuf0016.FirstOrDefault(z => z.CORP_NO == x.CORP_NO && z.CUST_NO == x.CUST_NO && z.PROD == x.PROD).PROD_NAME ?? string.Empty, " - ",
                                                               msf0024.FirstOrDefault(a => a.CORP_NO == x.CORP_NO && a.MEDIA_KIND == x.MEDIA_KIND).MEDIA_KIND_NAME ?? string.Empty),
                                   StartDate = STARTDATE,
                                   CompleteDate = ENDDATE,
                                   Description = cuf0015.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO).CUST_ABBR ?? string.Empty,
                                   ProjectStatus = "CUR",
                                   //ProjectOwnerID = _brandData.FirstOrDefault(z => z.BrandName == ConvertCompany(x.CORP_NO, cuf0016.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO && y.PROD == x.PROD).BU_CODE ?? string.Empty)).ProjectOwnerEmail ?? string.Empty,
                                   //OwnerEmail = _brandData.FirstOrDefault(z => z.BrandName == ConvertCompany(x.CORP_NO, cuf0016.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO && y.PROD == x.PROD).BU_CODE ?? string.Empty)).ProjectOwnerEmail ?? string.Empty,
                                   PortfolioName = cuf0015.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO).CUST_ABBR ?? string.Empty,
                                   PortfolioOwnerID = string.Empty,
                                   ProgramName = cuf0016.FirstOrDefault(z => z.CORP_NO == x.CORP_NO && z.CUST_NO == x.CUST_NO && z.PROD == x.PROD).PROD_NAME ?? string.Empty,
                                   ProgramOwnerID = string.Empty,
                                   CurrencyINR = "TWD",
                                   Budget = string.Empty,
                                   Benefit = string.Empty,
                                   ClientName = cuf0015.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO).CUST_ABBR ?? string.Empty,
                                   LineofBusiness = "Media",
                                   Region = "APAC",
                                   //BrandName = ConvertCompany(x.CORP_NO, cuf0016.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO && y.PROD == x.PROD).BU_CODE ?? string.Empty),
                                   Market = "Taiwan",
                                   Office = "Taipei",
                                   Chargeable = "Chargeable",
                                   Commission = "Commission",
                                   //GroupName = _brandData.FirstOrDefault(z => z.BrandName == ConvertCompany(x.CORP_NO, cuf0016.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO && y.PROD == x.PROD).BU_CODE ?? string.Empty)).GroupName ?? string.Empty,
                                   AccProjID = string.Empty,
                                   //LegalEntity = _brandData.FirstOrDefault(z => z.BrandName == ConvertCompany(x.CORP_NO, cuf0016.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO && y.PROD == x.PROD).BU_CODE ?? string.Empty)).EntityCode ?? string.Empty,
                                   FinSourSys = string.Empty,
                                   CRMURNID = string.Empty,
                                   CRMSourSys = string.Empty,
                                   OtherSource = "Caratstation",
                                   AdditionalProjectID = string.Empty,
                                   RecordStatus = "NEW",
                                   ImportDate = DateTime.Now,
                                   UploadDate = DateTime.Now,
                                   ImportUniqNo = 1,
                                   ImportLocName = "Admin",
                                   ImportEngName = "Admin",
                                   UploadUniqNo = 1,
                                   UploadLocName = "Admin",
                                   UploadEngName = "Admin",
                                   CompareDate = DateTime.Now,
                                   CompareUniqNo = 1,
                                   CompareLocName = "Admin",
                                   CompareEngName = "Admin",
                                   CORP_NO = x.CORP_NO,
                                   CUST_NO = x.CUST_NO,
                                   PROD_NAME = cuf0016.FirstOrDefault(z => z.CORP_NO == x.CORP_NO && z.CUST_NO == x.CUST_NO && z.PROD == x.PROD).PROD_NAME ?? string.Empty,
                                   PROD = x.PROD,
                                   MEDIA_KIND = x.MEDIA_KIND,
                                   MEDIA_KIND_NAME = msf0024.FirstOrDefault(a => a.CORP_NO == x.CORP_NO && a.MEDIA_KIND == x.MEDIA_KIND).MEDIA_KIND_NAME ?? string.Empty,
                                   WORK_CARD_NO = x.WORK_CARD_NO,
                                   CUST_ABBR = cuf0015.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO).CUST_ABBR ?? string.Empty,
                                   ImportType = "CaratStation",
                                   ProjectID = string.Empty,
                                   MediaType = string.Empty,
                                   ProjectType = string.Empty, // 不知抓哪個欄位
                                   //CompName = ConvertCompany(x.CORP_NO, cuf0016.FirstOrDefault(y => y.CORP_NO == x.CORP_NO && y.CUST_NO == x.CUST_NO && y.PROD == x.PROD).BU_CODE ?? string.Empty),
                               };
            #endregion

            #region 如果客戶或產品或媒體空白別不用轉，並產生待修正卡號清單
            var tempData = caratstation.ToList();
            var _cuf0016 = cuf0016.ToList();

            foreach (var item in tempData)
            {
                // 品牌有值才處理
                item.BrandName = ConvertCompany(item.CORP_NO, _cuf0016.FirstOrDefault(y => y.CORP_NO == item.CORP_NO && y.CUST_NO == item.CUST_NO && y.PROD == item.PROD)?.BU_CODE ?? string.Empty);
                if (!string.IsNullOrWhiteSpace(item.BrandName))
                {
                    item.ProjectOwnerID = brandData.FirstOrDefault(z => z.BrandName == item.BrandName)?.ProjectOwnerEmail ?? string.Empty;
                    item.OwnerEmail = brandData.FirstOrDefault(z => z.BrandName == item.BrandName)?.ProjectOwnerEmail ?? string.Empty;                    
                    item.GroupName = brandData.FirstOrDefault(z => z.BrandName == item.BrandName)?.GroupName ?? string.Empty;
                    item.LegalEntity = brandData.FirstOrDefault(z => z.BrandName == item.BrandName)?.EntityCode ?? string.Empty;
                    item.CompName = item.BrandName;
                    item.MediaType = item.MEDIA_KIND_NAME;
                    
                    var importDate = Convert.ToDateTime(item.ImportDate.ToString("yyyy/MM/dd"));
                    var importDateAddOne = importDate.AddDays(1);
                    if (string.IsNullOrWhiteSpace(item.CUST_ABBR) || string.IsNullOrWhiteSpace(item.PROD_NAME) || string.IsNullOrWhiteSpace(item.MEDIA_KIND_NAME))
                    {
                        _tempData.Add(item);
                        continue;
                    }
                    else
                    {
                        #region 原始資料
                        #region 檢查在Workfront專案編號是否存在
                        var selWF_Orig = selWF.Count(x => x.Name == item.ProjectName);
                        if (selWF_Orig > 0)
                            wkHave = true;
                        else
                            wkHave = false;
                        #endregion
                        #region 如果 Workfront 沒有資料則檢查是否已經新增該專案編號是否存在
                        if (!wkHave)
                        {
                            var selLoc_Orig = selLoc.Count(x => x.ProjectName == item.ProjectName);
                            if (selLoc_Orig > 0)
                                lcHave = true;   //若該專案已經存在則跳過，是否要更新再討論
                            else
                                lcHave = false;
                        }
                        else
                            lcHave = true;
                        #endregion
                        #region 如果Workfront及本地專案編號不存在所以新增一筆
                        if (!wkHave && !lcHave)
                        {
                            if (!addItems.Any(x => x.ProjectName == item.ProjectName))
                            {
                                var add = ConvertToProjectData(item);
                                // 加入新增清單
                                addItems.Add(add);
                            }
                        }
                        #endregion
                        #endregion
                        #region 如果是WWWINS或AAA MEDIA的網路就不用處理                    
                        if ((item.CORP_NO == "WWWINS" || item.CORP_NO == "AAA MEDIA") && item.MEDIA_KIND_NAME == "網路") continue;
                        #endregion
                        #region 如果是 Carat 則要檢查 客戶 + 產品 + "Plan" 及 客戶 + "Plan"
                        else if (item.CompName == "Carat")
                        {
                            #region 客戶 + 產品 + "Plan"
                            #region 檢查 Workfront 客戶 + 產品 + "Plan" 是否存在
                            var selWF_Carat = selWF.Count(x => x.Name == string.Concat(item.CUST_ABBR, " - ", item.PROD_NAME, " - Plan") && x.CreateTime >= importDate && x.CreateTime <= importDateAddOne);
                            if (selWF_Carat == 0)
                                wkHave = false;
                            else
                                wkHave = true;
                            #endregion

                            #region 如果 Workfront 沒有就要檢查本地是否已新增
                            if (!wkHave)
                            {
                                #region 檢查本地 客戶 + 產品 + "Plan" 是否存在
                                var selLoc_Crart = selLoc.Count(x => x.ProjectName == string.Concat(item.CUST_ABBR, " - ", item.PROD_NAME, " - Plan") && x.BrandName == "Carat");
                                if (selLoc_Crart == 0)
                                    wkHave = false;
                                else
                                    wkHave = true;
                                #endregion
                            }
                            else
                            {
                                lcHave = true;
                            }
                            #endregion

                            #region 如果 Workfront及本地都沒有就新增
                            if (!wkHave && !lcHave)
                            {
                                #region 新增一筆 客戶 + 產品 + "Plan"
                                item.ProjectName = string.Concat(item.CUST_ABBR, " - ", item.PROD_NAME, " - Plan");
                                if (!addItems.Any(x => x.ProjectName == item.ProjectName))
                                {
                                    var add = ConvertToProjectData(item);
                                    // 加入新增清單
                                    addItems.Add(add);
                                }
                                #endregion
                            }
                            #endregion
                            #endregion

                            #region 客戶 + "Plan"
                            #region 檢查 Workfront 客戶 + "Plan" 是否存在
                            var selWF_Carat_P = selWF.Count(x => x.Name == string.Concat(item.CUST_ABBR, " - Plan") && x.CreateTime >= importDate && x.CreateTime <= importDateAddOne);
                            if (selWF_Carat_P == 0)
                                wkHave = false;
                            else
                                wkHave = true;
                            #endregion

                            #region 如果 Workfront 沒有就要檢查本地是否已新增
                            if (!wkHave)
                            {
                                #region 檢查本地 客戶 + "Plan" 是否存在
                                var selLoc_Crart = selLoc.Count(x => x.ProjectName == string.Concat(item.CUST_ABBR, " - Plan"));
                                if (selLoc_Crart == 0)
                                    wkHave = false;
                                else
                                    wkHave = true;
                                #endregion
                            }
                            else
                            {
                                lcHave = true;
                            }
                            #endregion

                            #region 如果 Workfront及本地都沒有就新增
                            if (!wkHave && !lcHave)
                            {
                                #region 新增一筆 客戶 + "Plan"
                                item.ProjectName = string.Concat(item.CUST_ABBR, " - Plan");
                                if (!addItems.Any(x => x.ProjectName == item.ProjectName))
                                {
                                    item.ProgramName = "Plan";
                                    item.Commission = "Internal";
                                    var add = ConvertToProjectData(item);
                                    // 加入新增清單
                                    addItems.Add(add);
                                }
                                #endregion
                            }
                            #endregion
                            #endregion

                        }
                        #endregion
                        #region 是Isobar或AAA非網路的部份要複製一份到 Amplifi
                        else if ((item.CompName == "Isobar" || item.CompName == "AAA") && item.MEDIA_KIND_NAME != "網路")
                        {
                            #region 檢查 Workfront 是否有資料
                            var selWF_Isobar_AAA = selWF.Count(x => x.Name == item.ProjectName && x.CreateTime >= importDate && x.CreateTime <= importDateAddOne);
                            if (selWF_Isobar_AAA == 0)
                                wkHave = false;
                            else
                                wkHave = true;
                            #endregion

                            #region 如果 Workfront 沒有就檢查本地是否已新增
                            if (!wkHave)
                            {
                                #region 檢查 Workfront 是否有資料
                                var selLoc_Isobar_AAA = selLoc.Count(x => x.ProjectName == item.ProjectName);
                                if (selLoc_Isobar_AAA == 0)
                                    lcHave = false;
                                else
                                    lcHave = true;
                                #endregion
                            }
                            else
                                lcHave = true;
                            #endregion

                            #region 如果 Workfront 及本地都沒有就新增
                            if (!wkHave && !lcHave)
                            {
                                item.BrandName = "Amplifi";
                                if (!addItems.Any(x => x.ProjectName == item.ProjectName))
                                {
                                    var add = ConvertToProjectData(item);
                                    // 加入新增清單
                                    addItems.Add(add);
                                }
                            }
                            #endregion
                        }
                        #endregion

                        #region 產生專案與工作卡的關聯資料 (暫無)
                        //cmd.CommandText = "SELECT Count(*) FROM ProjWorkcard WHERE ProjectName = @proj AND WorkCard = @work";
                        //cmd.Parameters.Clear();
                        //cmd.Parameters.AddWithValue("@proj", dt.Rows[i]["CUST_NO_NAME"].ToString() + " - " + dt.Rows[i]["PROD_NAME"].ToString() + " - " + dt.Rows[i]["MEDIA_KIND_NAME"].ToString());
                        //cmd.Parameters.AddWithValue("@work", dt.Rows[i]["WORK_CARD_NO"].ToString());
                        //rd = cmd.ExecuteReader();
                        //rd.Read();
                        //if (rd.GetInt32(0) == 0)
                        //{
                        //    rd.Close();
                        //    cmd.CommandText = "INSERT INTO ProjWorkcard (ProjectName, WorkCard, CreateDate, CreateUniqNo, CreateLocName, CreateEngName) VALUES (@proj, @work, GetDate(), @uniq, @loc, @eng)";
                        //    cmd.Parameters.Clear();
                        //    cmd.Parameters.AddWithValue("@proj", dt.Rows[i]["CUST_NO_NAME"].ToString() + " - " + dt.Rows[i]["PROD_NAME"].ToString() + " - " + dt.Rows[i]["MEDIA_KIND_NAME"].ToString());
                        //    cmd.Parameters.AddWithValue("@work", dt.Rows[i]["WORK_CARD_NO"].ToString());
                        //    cmd.Parameters.AddWithValue("@uniq", Int32.Parse(Session["EmpUniqNo"].ToString()));
                        //    cmd.Parameters.AddWithValue("@loc", Session["EmpLocName"].ToString());
                        //    cmd.Parameters.AddWithValue("@eng", Session["UserName"].ToString());
                        //    cmd.ExecuteNonQuery();
                        //}
                        //else
                        //    rd.Close();
                        #endregion
                    }
                }
            }
            #endregion

            #region 刪除舊資料並新增
            if (addItems.Any())
            {
                foreach (var item1 in selLoc)
                {                    
                    _projectDataRepository.Delete(item1);
                }
                // 確定新增的取得 ProjectID
                foreach (var item in addItems)
                {
                    item.ProjectID = GetNewProjectID(item.BrandName);
                }
                _projectDataRepository.Create(addItems);
            }
            #endregion

            #region 待修正卡工作清單(刪除舊資料並新增)
            var badExistData = _badProjectDataRepository.GetAll().ToList();
            var badData = _tempData.ToList();
            foreach (var item in badData)
            {
                addBadItems.Add(ConvertToBadProjectData(item));
            }
            if (addBadItems.Any())
            {
                foreach (var item1 in badExistData)
                {
                    _badProjectDataRepository.Delete(item1);
                }
                _badProjectDataRepository.Create(addBadItems);
            }
            #endregion

            // 已寫入的檔案
            var tempResult = ConvertToProjectDataListResult(_selLoc);

            #region 篩選
            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.ProjectName.Contains(search) ||
                    x.StartDate.Contains(search) ||
                    x.CompleteDate.Contains(search) ||
                    x.ProjectStatus.Contains(search) ||
                    x.ProjectOwnerID.Contains(search) ||
                    x.OwnerEmail.Contains(search) ||
                    x.PortfolioName.Contains(search) ||
                    x.PortfolioOwnerID.Contains(search) ||
                    x.ProgramName.Contains(search) ||
                    x.ProgramOwnerID.Contains(search) ||
                    x.CurrencyINR.Contains(search) ||
                    x.Budget.Contains(search) ||
                    x.Benefit.Contains(search) ||
                    x.ClientName.Contains(search) ||
                    x.LineofBusiness.Contains(search) ||
                    x.Region.Contains(search) ||
                    x.BrandName.Contains(search) ||
                    x.Market.Contains(search) ||
                    x.Office.Contains(search) ||
                    x.Chargeable.Contains(search) ||
                    x.Commission.Contains(search) ||
                    x.GroupName.Contains(search) ||
                    x.AccProjID.Contains(search) ||
                    x.LegalEntity.Contains(search) ||
                    x.FinSourSys.Contains(search) ||
                    x.CRMURNID.Contains(search) ||
                    x.CRMSourSys.Contains(search) ||
                    x.OtherSource.Contains(search) ||
                    x.AdditionalProjectID.Contains(search) ||
                    x.RecordStatus.Contains(search) ||
                    x.ImportLocName.Contains(search) ||
                    x.ImportEngName.Contains(search) ||
                    x.UploadLocName.Contains(search) ||
                    x.UploadEngName.Contains(search) ||
                    x.CompareLocName.Contains(search) ||
                    x.CompareEngName.Contains(search) ||
                    false);
            }
            if (searchModel.StartDate != null)
            {
                tempResult = tempResult.Where(x =>
                    x.ImportDate >= searchModel.StartDate ||
                    false);
            }
            if (!string.IsNullOrWhiteSpace(isChargeable))
                tempResult = tempResult.Where(x =>
                    x.Chargeable == isChargeable ||
                    false);
            #endregion

            // 進行分頁處理            
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            return result;
        }
        #endregion

        #region ConvertCompany
        protected string ConvertCompany(string compCode, string buCode)
        {
            string sResult = "";

            //如果BU組別代碼是 Vizeum_1 或 Vizeum_6 則公司為 Vizeum
            if (buCode == "Vizeum_1" || buCode == "Vizeum_6")
            {
                sResult = "Vizeum";
            }
            else
            {
                switch (compCode)
                {
                    case "AAA MEDIA":
                        sResult = "AAA";
                        break;
                    case "AMNET":
                        sResult = "Amnet";
                        break;
                    case "CT":
                        sResult = "Carat";
                        break;
                    case "Dentsuone":
                        sResult = "Dentsu One";
                        break;
                    case "IP":
                        sResult = "iProspect";
                        break;
                    case "PO":
                        sResult = "Amplifi";
                        break;
                    case "VI":
                        sResult = "Vizeum";
                        break;
                    case "WWWWINS":
                        sResult = "Isobar";
                        break;
                }
            }

            return sResult;
        }
        #endregion

        #region CheckTodayDataExist
        public int CheckTodayDataExist(ProjectDataSearchModel searchModel)
        {
            var result = 0;
            var date = DateTime.Now.Date;
            result = _workfrontReportRepository.GetAll().Count(x => x.CreateTime >= date);                
            
            return result;
        }
        #endregion

        #region ConvertToProjectData
        protected ProjectData ConvertToProjectData(ProjectDataListResult source)
        {
            var result = new ProjectData()
            {
                ID = Guid.NewGuid(),
                WORK_CARD_NO = source.WORK_CARD_NO ?? string.Empty,
                ProjectName = source.ProjectName ?? string.Empty,
                StartDate = (source.StartDate.Contains("T00:00:00:00+0000") ? source.StartDate : string.Concat(source.StartDate, "T00:00:00:00+0000")) ?? string.Empty,
                CompleteDate = (source.StartDate.Contains("T00:00:00:00+0000") ? source.CompleteDate : string.Concat(source.CompleteDate, "T00:00:00:00+0000")) ?? string.Empty,
                Description = source.Description ?? string.Empty,
                ProjectStatus = source.ProjectStatus ?? string.Empty,
                ProjectOwnerID = source.ProjectOwnerID ?? string.Empty,
                OwnerEmail = source.OwnerEmail ?? string.Empty,
                PortfolioName = source.PortfolioName ?? string.Empty,
                PortfolioOwnerID = source.PortfolioOwnerID ?? string.Empty,
                ProgramName = source.ProgramName ?? string.Empty,
                ProgramOwnerID = source.ProgramOwnerID ?? string.Empty,
                CurrencyINR = source.CurrencyINR ?? string.Empty,
                Budget = source.Budget ?? string.Empty,
                Benefit = source.Benefit ?? string.Empty,
                ClientName = source.ClientName ?? string.Empty,
                LineofBusiness = source.LineofBusiness ?? string.Empty,
                Region = source.Region ?? string.Empty,
                BrandName = source.BrandName ?? string.Empty,
                Market = source.Market ?? string.Empty,
                Office = source.Office ?? string.Empty,
                Chargeable = source.Chargeable ?? string.Empty,
                Commission = source.Commission ?? string.Empty,
                GroupName = source.GroupName ?? string.Empty,
                AccProjID = source.AccProjID ?? string.Empty,
                LegalEntity = source.LegalEntity ?? string.Empty,
                FinSourSys = source.FinSourSys ?? string.Empty,
                CRMURNID = source.CRMURNID ?? string.Empty,
                CRMSourSys = source.CRMSourSys ?? string.Empty,
                OtherSource = source.OtherSource ?? string.Empty,
                AdditionalProjectID = source.AdditionalProjectID ?? string.Empty,
                RecordStatus = source.RecordStatus ?? string.Empty,
                ImportDate = source.ImportDate,
                UploadDate = source.UploadDate,
                ImportUniqNo = source.ImportUniqNo,
                ImportLocName = source.ImportLocName ?? string.Empty,
                ImportEngName = source.ImportEngName ?? string.Empty,
                UploadUniqNo = source.UploadUniqNo,
                UploadLocName = source.UploadLocName ?? string.Empty,
                UploadEngName = source.UploadEngName ?? string.Empty,
                CompareDate = source.CompareDate,
                CompareUniqNo = source.CompareUniqNo,
                CompareLocName = source.CompareLocName ?? string.Empty,
                CompareEngName = source.CompareEngName ?? string.Empty,
                ImportType = source.ImportType ?? string.Empty,
                ProjectID = source.ProjectID ?? string.Empty,
                MediaType = source.MediaType ?? string.Empty,
                ProjectType = (string.IsNullOrEmpty(source.Commission) ? source.ProjectType : source.Commission ) ?? string.Empty,
                
            };

            return result;
        }
        #endregion

        #region ConvertToNonChargeable
        protected NonChargeable ConvertToNonChargeable(ProjectDataListResult source)
        {
            var result = new NonChargeable()
            {
                ID = Guid.NewGuid(),
                WORK_CARD_NO = source.WORK_CARD_NO ?? string.Empty,
                ProjectName = source.ProjectName ?? string.Empty,
                StartDate = source.StartDate ?? string.Empty,
                CompleteDate = source.CompleteDate ?? string.Empty,
                Description = source.Description ?? string.Empty,
                ProjectStatus = source.ProjectStatus ?? string.Empty,
                ProjectOwnerID = source.ProjectOwnerID ?? string.Empty,
                OwnerEmail = source.OwnerEmail ?? string.Empty,
                PortfolioName = source.PortfolioName ?? string.Empty,
                PortfolioOwnerID = source.PortfolioOwnerID ?? string.Empty,
                ProgramName = source.ProgramName ?? string.Empty,
                ProgramOwnerID = source.ProgramOwnerID ?? string.Empty,
                CurrencyINR = source.CurrencyINR ?? string.Empty,
                Budget = source.Budget ?? string.Empty,
                Benefit = source.Benefit ?? string.Empty,
                ClientName = source.ClientName ?? string.Empty,
                LineofBusiness = source.LineofBusiness ?? string.Empty,
                Region = source.Region ?? string.Empty,
                BrandName = source.BrandName ?? string.Empty,
                Market = source.Market ?? string.Empty,
                Office = source.Office ?? string.Empty,
                Chargeable = source.Chargeable ?? string.Empty,
                Commission = source.Commission ?? string.Empty,
                GroupName = source.GroupName ?? string.Empty,
                AccProjID = source.AccProjID ?? string.Empty,
                LegalEntity = source.LegalEntity ?? string.Empty,
                FinSourSys = source.FinSourSys ?? string.Empty,
                CRMURNID = source.CRMURNID ?? string.Empty,
                CRMSourSys = source.CRMSourSys ?? string.Empty,
                OtherSource = source.OtherSource ?? string.Empty,
                AdditionalProjectID = source.AdditionalProjectID ?? string.Empty,
                RecordStatus = source.RecordStatus ?? string.Empty,
                ImportDate = source.ImportDate,
                UploadDate = source.UploadDate,
                ImportUniqNo = source.ImportUniqNo,
                ImportLocName = source.ImportLocName ?? string.Empty,
                ImportEngName = source.ImportEngName ?? string.Empty,
                UploadUniqNo = source.UploadUniqNo,
                UploadLocName = source.UploadLocName ?? string.Empty,
                UploadEngName = source.UploadEngName ?? string.Empty,
                CompareDate = source.CompareDate,
                CompareUniqNo = source.CompareUniqNo,
                CompareLocName = source.CompareLocName ?? string.Empty,
                CompareEngName = source.CompareEngName ?? string.Empty,
                ImportType = source.ImportType ?? string.Empty,
                ProjectID = source.ProjectID ?? string.Empty,
                MediaType = source.MediaType ?? string.Empty,
                ProjectType = source.ProjectType ?? string.Empty,
            };

            return result;
        }
        #endregion

        #region ConvertToBadProjectData
        protected BadProjectData ConvertToBadProjectData(ProjectDataListResult source)
        {
            var result = new BadProjectData()
            {
                ID = Guid.NewGuid(),
                WORK_CARD_NO = source.WORK_CARD_NO ?? string.Empty,
                ProjectName = source.ProjectName ?? string.Empty,
                StartDate = source.StartDate ?? string.Empty,
                CompleteDate = source.CompleteDate ?? string.Empty,
                Description = source.Description ?? string.Empty,
                ProjectStatus = source.ProjectStatus ?? string.Empty,
                ProjectOwnerID = source.ProjectOwnerID ?? string.Empty,
                OwnerEmail = source.OwnerEmail ?? string.Empty,
                PortfolioName = source.PortfolioName ?? string.Empty,
                PortfolioOwnerID = source.PortfolioOwnerID ?? string.Empty,
                ProgramName = source.ProgramName ?? string.Empty,
                ProgramOwnerID = source.ProgramOwnerID ?? string.Empty,
                CurrencyINR = source.CurrencyINR ?? string.Empty,
                Budget = source.Budget ?? string.Empty,
                Benefit = source.Benefit ?? string.Empty,
                ClientName = source.ClientName ?? string.Empty,
                LineofBusiness = source.LineofBusiness ?? string.Empty,
                Region = source.Region ?? string.Empty,
                BrandName = source.BrandName ?? string.Empty,
                Market = source.Market ?? string.Empty,
                Office = source.Office ?? string.Empty,
                Chargeable = source.Chargeable ?? string.Empty,
                Commission = source.Commission ?? string.Empty,
                GroupName = source.GroupName ?? string.Empty,
                AccProjID = source.AccProjID ?? string.Empty,
                LegalEntity = source.LegalEntity ?? string.Empty,
                FinSourSys = source.FinSourSys ?? string.Empty,
                CRMURNID = source.CRMURNID ?? string.Empty,
                CRMSourSys = source.CRMSourSys ?? string.Empty,
                OtherSource = source.OtherSource ?? string.Empty,
                AdditionalProjectID = source.AdditionalProjectID ?? string.Empty,
                RecordStatus = source.RecordStatus ?? string.Empty,
                ImportDate = source.ImportDate,
                UploadDate = source.UploadDate,
                ImportUniqNo = source.ImportUniqNo,
                ImportLocName = source.ImportLocName ?? string.Empty,
                ImportEngName = source.ImportEngName ?? string.Empty,
                UploadUniqNo = source.UploadUniqNo,
                UploadLocName = source.UploadLocName ?? string.Empty,
                UploadEngName = source.UploadEngName ?? string.Empty,
                CompareDate = source.CompareDate,
                CompareUniqNo = source.CompareUniqNo,
                CompareLocName = source.CompareLocName ?? string.Empty,
                CompareEngName = source.CompareEngName ?? string.Empty,
                ImportType = source.ImportType,
            };

            return result;
        }
        #endregion

        #region getCSVFile 
        public List<ProjectDataListResult> getCSVFile(string path, string user)
        {
            var temp = new List<ProjectDataListResult>();
            //Create COM Objects. Create a COM object for everything that is referenced
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(path);
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            Excel.Range xlRange = xlWorksheet.UsedRange;

            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;

            //iterate over the rows and columns and print to the console as it appears in the file
            //excel is not zero based!!
            for (int i = 1; i <= rowCount; i++)
            {
                
                var rowData = string.Empty;
                List<string> tempData = new List<string>();

                for (int j = 1; j <= colCount; j++)
                {
                    if (i > 1)
                    {

                        //new line
                        if (j == 1)
                            Console.Write("\r\n");

                        //write the value to the console
                        if (xlRange.Cells[i, j] != null && xlRange.Cells[i, j].Value2 != null)
                            Console.Write(xlRange.Cells[i, j].Value2.ToString() + "\t");

                        var cell = xlRange.Cells[i, j];
                                                
                        rowData = cell.text;
                        
                        tempData = rowData.Split('|').ToList();

                    }
                }
                if (tempData.Any())
                {
                    var _temp = new ProjectDataListResult();

                    _temp.ID = Guid.NewGuid();
                    _temp.ProjectName = tempData[0] ?? string.Empty;
                    _temp.StartDate = tempData[1] ?? string.Empty;
                    _temp.CompleteDate = tempData[2] ?? string.Empty;
                    _temp.Description = tempData[3] ?? string.Empty;
                    _temp.ProjectStatus = tempData[4] ?? string.Empty;
                    _temp.ProjectOwnerID = tempData[5] ?? string.Empty;
                    _temp.OwnerEmail = tempData[6] ?? string.Empty;
                    _temp.PortfolioName = tempData[7] ?? string.Empty;
                    _temp.PortfolioOwnerID = tempData[8] ?? string.Empty;
                    _temp.ProgramName = tempData[9] ?? string.Empty;
                    _temp.OwnerEmail = tempData[10] ?? string.Empty;
                    _temp.CurrencyINR = tempData[11] ?? string.Empty;
                    _temp.Budget = tempData[12] ?? string.Empty;
                    _temp.Benefit = tempData[13] ?? string.Empty;
                    _temp.ClientName = tempData[14] ?? string.Empty;
                    _temp.LineofBusiness = tempData[15] ?? string.Empty;
                    _temp.Region = tempData[16] ?? string.Empty;
                    _temp.BrandName = tempData[17] ?? string.Empty;
                    _temp.Market = tempData[18] ?? string.Empty;
                    _temp.Office = tempData[19] ?? string.Empty;
                    _temp.Chargeable = tempData[20] ?? string.Empty;
                    //_temp.ProjectType = tempData[21] ?? string.Empty;   ??
                    _temp.GroupName = tempData[22] ?? string.Empty;
                    _temp.AccProjID = tempData[23] ?? string.Empty;
                    _temp.LegalEntity = tempData[24] ?? string.Empty;
                    _temp.FinSourSys = tempData[25] ?? string.Empty;
                    _temp.CRMURNID = tempData[26] ?? string.Empty;
                    _temp.CRMSourSys = tempData[27] ?? string.Empty;
                    _temp.OtherSource = tempData[28] ?? string.Empty;
                    _temp.AdditionalProjectID = tempData[29] ?? string.Empty;
                    _temp.RecordStatus = tempData[30] ?? string.Empty;
                    _temp.ImportType = "CSV";
                    _temp.CORP_NO = string.Empty;
                    _temp.CUST_NO = string.Empty;
                    _temp.MEDIA_KIND = string.Empty;
                    _temp.CompName = string.Empty;
                    _temp.ImportDate = DateTime.Now.Date;
                    _temp.UploadDate = DateTime.Now.Date;
                    _temp.ImportUniqNo = 0;
                    _temp.ImportLocName = string.Empty;
                    _temp.ImportEngName = string.Empty;
                    _temp.UploadUniqNo = 0;
                    _temp.UploadLocName = string.Empty;
                    _temp.UploadEngName = string.Empty;
                    _temp.CompareDate = DateTime.Now.Date;
                    _temp.CompareUniqNo = 0;
                    _temp.CompareLocName = string.Empty;
                    _temp.CompareEngName = string.Empty;
                    _temp.AMNET_TERM_NAME = string.Empty;
                    _temp.BUYER_TEAM_NAME = string.Empty;
                    _temp.BU_CODE = string.Empty;
                    _temp.BU_CODE_NAME = string.Empty;
                    _temp.CREATE_EMP_NO_NAME = string.Empty;
                    _temp.CUST_ABBR = string.Empty;
                    _temp.CUST_NO_NAME = string.Empty;
                    _temp.Commission = string.Empty;
                    _temp.DEPUTY_EMP_NO_NAME = string.Empty;
                    _temp.MEDIA_KIND_NAME = string.Empty;
                    _temp.PROD = string.Empty;
                    _temp.PROD_NAME = string.Empty;
                    _temp.ProgramOwnerID = string.Empty;
                    _temp.RECEIVE_EMP_NO_NAME = string.Empty;
                    _temp.WORK_CARD_MEDIA_TYPE_NAME = string.Empty;
                    _temp.WORK_CARD_NO = string.Empty;
                    _temp.WORK_STEP_NAME = string.Empty;

                    temp.Add(_temp);
                }
            }

            //cleanup
            GC.Collect();
            GC.WaitForPendingFinalizers();

            //rule of thumb for releasing com objects:
            //  never use two dots, all COM objects must be referenced and released individually
            //  ex: [somthing].[something].[something] is bad

            //release com objects to fully kill excel process from running in the background
            Marshal.ReleaseComObject(xlRange);
            Marshal.ReleaseComObject(xlWorksheet);

            //close and release
            xlWorkbook.Close();
            Marshal.ReleaseComObject(xlWorkbook);

            //quit and release
            xlApp.Quit();
            Marshal.ReleaseComObject(xlApp);

            return temp;
        }
        #endregion

        #region getExcelFile 
        public List<ProjectDataListResult> getExcelFile(string path, string user)
        {
            var workFrontData = _workfrontReportRepository.GetAll().ToList();
            var yearNum = DateTime.Now.Year.ToString().Substring(2, 2);
            var brandData = _brandDataRepository.GetAll().ToList();
            var temp = new List<ProjectDataListResult>();
            //Create COM Objects. Create a COM object for everything that is referenced
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(path);
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets["FTP_upload"];
            
            var a = xlWorksheet.Name;

            Excel.Range xlRange = xlWorksheet.UsedRange;

            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;

            //iterate over the rows and columns and print to the console as it appears in the file
            //excel is not zero based!!
            for (int i = 1; i <= rowCount; i++)
            {
                List<string> tempData = new List<string>();

                var _cell = xlRange.Cells[i, 1];
                if (string.IsNullOrEmpty(_cell.text))
                    continue;

                for (int j = 1; j <= colCount; j++)
                {
                    
                    if (i > 1)
                    {
                        
                        var rowData = string.Empty;
                        //new line
                        if (j == 1)
                            Console.Write("\r\n");

                        //write the value to the console
                        if (xlRange.Cells[i, j] != null && xlRange.Cells[i, j].Value2 != null)
                            Console.Write(xlRange.Cells[i, j].Value2.ToString() + "\t");

                        var cell = xlRange.Cells[i, j];

                        rowData = cell.text;

                        tempData.Add(rowData);

                    }
                }

                if (tempData.Any() && !string.IsNullOrEmpty(tempData[2]))
                {                    
                    var _temp = new ProjectDataListResult();

                    #region 待確認上傳檔案
                    //_temp.ID = Guid.NewGuid();
                    //_temp.ProjectName = tempData[0] ?? string.Empty;
                    //_temp.StartDate = tempData[1] ?? string.Empty;
                    //_temp.CompleteDate = tempData[2] ?? string.Empty;
                    //_temp.Description = tempData[3] ?? string.Empty;
                    //_temp.ProjectStatus = tempData[4] ?? string.Empty;
                    //_temp.ProjectOwnerID = tempData[5] ?? string.Empty;
                    //_temp.OwnerEmail = tempData[6] ?? string.Empty;
                    //_temp.PortfolioName = tempData[7] ?? string.Empty;
                    //_temp.PortfolioOwnerID = tempData[8] ?? string.Empty;
                    //_temp.ProgramName = tempData[9] ?? string.Empty;
                    //_temp.OwnerEmail = tempData[10] ?? string.Empty;
                    //_temp.CurrencyINR = tempData[11] ?? string.Empty;
                    //_temp.Budget = tempData[12] ?? string.Empty;
                    //_temp.Benefit = tempData[13] ?? string.Empty;
                    //_temp.ClientName = tempData[14] ?? string.Empty;
                    //_temp.LineofBusiness = tempData[15] ?? string.Empty;
                    //_temp.Region = tempData[16] ?? string.Empty;
                    //_temp.BrandName = tempData[17] ?? string.Empty;
                    //_temp.Market = tempData[18] ?? string.Empty;
                    //_temp.Office = tempData[19] ?? string.Empty;
                    //_temp.Chargeable = tempData[20] ?? string.Empty;
                    ////_temp.ProjectType = tempData[21] ?? string.Empty;   ??
                    //_temp.GroupName = tempData[22] ?? string.Empty;
                    //_temp.AccProjID = tempData[23] ?? string.Empty;
                    //_temp.LegalEntity = tempData[24] ?? string.Empty;
                    //_temp.FinSourSys = tempData[25] ?? string.Empty;
                    //_temp.CRMURNID = tempData[26] ?? string.Empty;
                    //_temp.CRMSourSys = tempData[27] ?? string.Empty;
                    //_temp.OtherSource = tempData[28] ?? string.Empty;
                    //_temp.AdditionalProjectID = tempData[29] ?? string.Empty;
                    //_temp.RecordStatus = tempData[30] ?? string.Empty;
                    //_temp.ImportType = "Excel";
                    //_temp.CORP_NO = string.Empty;
                    //_temp.CUST_NO = string.Empty;
                    //_temp.MEDIA_KIND = string.Empty;
                    //_temp.CompName = string.Empty;
                    //_temp.ImportDate = DateTime.Now.Date;
                    //_temp.UploadDate = DateTime.Now.Date;
                    //_temp.ImportUniqNo = 0;
                    //_temp.ImportLocName = string.Empty;
                    //_temp.ImportEngName = string.Empty;
                    //_temp.UploadUniqNo = 0;
                    //_temp.UploadLocName = string.Empty;
                    //_temp.UploadEngName = string.Empty;
                    //_temp.CompareDate = DateTime.Now.Date;
                    //_temp.CompareUniqNo = 0;
                    //_temp.CompareLocName = string.Empty;
                    //_temp.CompareEngName = string.Empty;
                    //_temp.AMNET_TERM_NAME = string.Empty;
                    //_temp.BUYER_TEAM_NAME = string.Empty;
                    //_temp.BU_CODE = string.Empty;
                    //_temp.BU_CODE_NAME = string.Empty;
                    //_temp.CREATE_EMP_NO_NAME = string.Empty;
                    //_temp.CUST_ABBR = string.Empty;
                    //_temp.CUST_NO_NAME = string.Empty;
                    //_temp.Commission = string.Empty;
                    //_temp.DEPUTY_EMP_NO_NAME = string.Empty;
                    //_temp.MEDIA_KIND_NAME = string.Empty;
                    //_temp.PROD = string.Empty;
                    //_temp.PROD_NAME = string.Empty;
                    //_temp.ProgramOwnerID = string.Empty;
                    //_temp.RECEIVE_EMP_NO_NAME = string.Empty;
                    //_temp.WORK_CARD_MEDIA_TYPE_NAME = string.Empty;
                    //_temp.WORK_CARD_NO = string.Empty;
                    //_temp.WORK_STEP_NAME = string.Empty;
                    #endregion

                    _temp.ID = Guid.NewGuid();
                    _temp.ProjectName = tempData[0] ?? string.Empty;
                    _temp.StartDate = tempData[1] ?? string.Empty;
                    _temp.CompleteDate = tempData[2] ?? string.Empty;
                    _temp.Description = tempData[3] ?? string.Empty;
                    _temp.ProjectStatus = tempData[4] ?? string.Empty;
                    _temp.ProjectOwnerID = tempData[5] ?? string.Empty;
                    _temp.OwnerEmail = tempData[6] ?? string.Empty;
                    _temp.PortfolioName = tempData[7] ?? string.Empty;
                    _temp.PortfolioOwnerID = tempData[8] ?? string.Empty;
                    _temp.ProgramName = tempData[9] ?? string.Empty;
                    _temp.CurrencyINR = tempData[11] ?? string.Empty;
                    _temp.Budget = tempData[12] ?? string.Empty;
                    _temp.Benefit = tempData[13] ?? string.Empty;
                    _temp.ClientName = tempData[14] ?? string.Empty;
                    _temp.LineofBusiness = tempData[15] ?? string.Empty;
                    _temp.Region = tempData[16] ?? string.Empty;
                    _temp.BrandName = tempData[17] ?? string.Empty;
                    _temp.Market = tempData[18] ?? string.Empty;
                    _temp.Office = tempData[19] ?? string.Empty;
                    _temp.Chargeable = tempData[20] ?? string.Empty;
                    _temp.ProjectType = tempData[21] ?? string.Empty;
                    _temp.GroupName = tempData[22] ?? string.Empty; /*brandData.FirstOrDefault(x => x.BrandName == tempData[17])?.GroupName ?? string.Empty; // 要抓BrandData*/
                    _temp.AccProjID = tempData[23] ?? string.Empty;
                    _temp.LegalEntity = brandData.FirstOrDefault(x => x.BrandName == tempData[17])?.EntityCode ?? string.Empty; // 要抓BrandData
                    _temp.FinSourSys = tempData[25] ?? string.Empty;
                    _temp.CRMURNID = tempData[26] ?? string.Empty;
                    _temp.CRMSourSys = tempData[27] ?? string.Empty;
                    _temp.OtherSource = tempData[28] ?? string.Empty;
                    _temp.AdditionalProjectID = string.Empty;
                    _temp.RecordStatus = "NEW";
                    _temp.ImportType = "Excel";
                    _temp.CORP_NO = string.Empty;
                    _temp.CUST_NO = string.Empty;
                    _temp.MEDIA_KIND = string.Empty;
                    _temp.CompName = string.Empty;
                    _temp.ImportDate = DateTime.Now.Date;
                    _temp.UploadDate = DateTime.Now.Date;
                    _temp.ImportUniqNo = 0;
                    _temp.ImportLocName = string.Empty;
                    _temp.ImportEngName = string.Empty;
                    _temp.UploadUniqNo = 0;
                    _temp.UploadLocName = string.Empty;
                    _temp.UploadEngName = string.Empty;
                    _temp.CompareDate = DateTime.Now.Date;
                    _temp.CompareUniqNo = 0;
                    _temp.CompareLocName = string.Empty;
                    _temp.CompareEngName = string.Empty;
                    _temp.AMNET_TERM_NAME = string.Empty;
                    _temp.BUYER_TEAM_NAME = string.Empty;
                    _temp.BU_CODE = string.Empty;
                    _temp.BU_CODE_NAME = string.Empty;
                    _temp.CREATE_EMP_NO_NAME = string.Empty;
                    _temp.CUST_ABBR = string.Empty;
                    _temp.CUST_NO_NAME = string.Empty;
                    _temp.Commission = string.Empty;
                    _temp.DEPUTY_EMP_NO_NAME = string.Empty;
                    _temp.MEDIA_KIND_NAME = string.Empty;
                    _temp.PROD = string.Empty;
                    _temp.PROD_NAME = string.Empty;
                    _temp.ProgramOwnerID = string.Empty;
                    _temp.RECEIVE_EMP_NO_NAME = string.Empty;
                    _temp.WORK_CARD_MEDIA_TYPE_NAME = string.Empty;
                    _temp.WORK_CARD_NO = string.Empty;
                    _temp.WORK_STEP_NAME = string.Empty;
                    _temp.ProjectID = GetNewProjectID(tempData[17]);
                    _temp.MediaType = string.Empty;

                    temp.Add(_temp);
                }
            }

            //cleanup
            GC.Collect();
            GC.WaitForPendingFinalizers();

            //rule of thumb for releasing com objects:
            //  never use two dots, all COM objects must be referenced and released individually
            //  ex: [somthing].[something].[something] is bad

            //release com objects to fully kill excel process from running in the background
            Marshal.ReleaseComObject(xlRange);
            Marshal.ReleaseComObject(xlWorksheet);

            //close and release
            xlWorkbook.Close();
            Marshal.ReleaseComObject(xlWorkbook);

            //quit and release
            xlApp.Quit();
            Marshal.ReleaseComObject(xlApp);

            return temp;
        }
        #endregion

        #region ConvertToProjectDataListResult
        public IQueryable<ProjectDataListResult> ConvertToProjectDataListResult(IQueryable<ProjectData> projectData)
        {
            var result = from x in projectData
                         select new ProjectDataListResult
                         {                             
                             SequenceNo = x.SequenceNo,
                             ID = x.ID,
                             WORK_CARD_NO = x.WORK_CARD_NO,
                             ProjectName = x.ProjectName,
                             StartDate = x.StartDate,
                             CompleteDate = x.CompleteDate,
                             Description = x.Description,
                             ProjectStatus = x.ProjectStatus,
                             ProjectOwnerID = x.ProjectOwnerID,
                             OwnerEmail = x.OwnerEmail,
                             PortfolioName = x.PortfolioName,
                             PortfolioOwnerID = x.PortfolioOwnerID,
                             ProgramName = x.ProgramName,
                             ProgramOwnerID = x.ProgramOwnerID,
                             CurrencyINR = x.CurrencyINR,
                             Budget = x.Budget,
                             Benefit = x.Benefit,
                             ClientName = x.ClientName,
                             LineofBusiness = x.LineofBusiness,
                             Region = x.Region,
                             BrandName = x.BrandName,
                             Market = x.Market,
                             Office = x.Office,
                             Chargeable = x.Chargeable,
                             Commission = x.Commission,
                             GroupName = x.GroupName,
                             AccProjID = x.AccProjID,
                             LegalEntity = x.LegalEntity,
                             FinSourSys = x.FinSourSys,
                             CRMURNID = x.CRMURNID,
                             CRMSourSys = x.CRMSourSys,
                             OtherSource = x.OtherSource,
                             AdditionalProjectID = x.AdditionalProjectID,
                             RecordStatus = x.RecordStatus,
                             ImportDate = x.ImportDate,
                             UploadDate = x.UploadDate,
                             ImportUniqNo = x.ImportUniqNo,
                             ImportLocName = x.ImportLocName,
                             ImportEngName = x.ImportEngName,
                             UploadUniqNo = x.UploadUniqNo,
                             UploadLocName = x.UploadEngName,
                             UploadEngName = x.UploadEngName,
                             CompareDate = x.CompareDate,
                             CompareUniqNo = x.CompareUniqNo,
                             CompareLocName = x.CompareLocName,
                             CompareEngName = x.CompareEngName,
                             CORP_NO = string.Empty,
                             CUST_NO = string.Empty,
                             MEDIA_KIND = string.Empty,
                             CompName = string.Empty,
                             ImportType = x.ImportType,
                             ProjectID = x.ProjectID,
                             MediaType = x.MediaType,
                             ProjectType = x.ProjectType,
                         };

            return result;
        }
        #endregion

        #region NonChargeConvertToProjectDataListResult
        public IQueryable<ProjectDataListResult> NonChargeConvertToProjectDataListResult(IQueryable<NonChargeable> nonChargeable)
        {
            var result = from x in nonChargeable
                         select new ProjectDataListResult
                         {
                             SequenceNo = x.SequenceNo,
                             ID = x.ID,
                             WORK_CARD_NO = x.WORK_CARD_NO,
                             ProjectName = x.ProjectName,
                             StartDate = x.StartDate,
                             CompleteDate = x.CompleteDate,
                             Description = x.Description,
                             ProjectStatus = x.ProjectStatus,
                             ProjectOwnerID = x.ProjectOwnerID,
                             OwnerEmail = x.OwnerEmail,
                             PortfolioName = x.PortfolioName,
                             PortfolioOwnerID = x.PortfolioOwnerID,
                             ProgramName = x.ProgramName,
                             ProgramOwnerID = x.ProgramOwnerID,
                             CurrencyINR = x.CurrencyINR,
                             Budget = x.Budget,
                             Benefit = x.Benefit,
                             ClientName = x.ClientName,
                             LineofBusiness = x.LineofBusiness,
                             Region = x.Region,
                             BrandName = x.BrandName,
                             Market = x.Market,
                             Office = x.Office,
                             Chargeable = x.Chargeable,
                             Commission = x.Commission,
                             GroupName = x.GroupName,
                             AccProjID = x.AccProjID,
                             LegalEntity = x.LegalEntity,
                             FinSourSys = x.FinSourSys,
                             CRMURNID = x.CRMURNID,
                             CRMSourSys = x.CRMSourSys,
                             OtherSource = x.OtherSource,
                             AdditionalProjectID = x.AdditionalProjectID,
                             RecordStatus = x.RecordStatus,
                             ImportDate = x.ImportDate,
                             UploadDate = x.UploadDate,
                             ImportUniqNo = x.ImportUniqNo,
                             ImportLocName = x.ImportLocName,
                             ImportEngName = x.ImportEngName,
                             UploadUniqNo = x.UploadUniqNo,
                             UploadLocName = x.UploadEngName,
                             UploadEngName = x.UploadEngName,
                             CompareDate = x.CompareDate,
                             CompareUniqNo = x.CompareUniqNo,
                             CompareLocName = x.CompareLocName,
                             CompareEngName = x.CompareEngName,
                             CORP_NO = string.Empty,
                             CUST_NO = string.Empty,
                             MEDIA_KIND = string.Empty,
                             CompName = string.Empty,
                             ImportType = x.ImportType,
                             ProjectID = x.ProjectID,
                             MediaType = x.MediaType,
                         };

            return result;
        }
        #endregion

        #region inertResult
        public List<ProjectDataListResult> insertResult(List<ProjectDataListResult> excelData)
        {
            var result = new List<ProjectDataListResult>();
            var importData = new List<ProjectData>();
            var badData = new List<BadProjectData>();
            try
            {
                if (excelData.Any())
                {
                    #region 手動匯入新增 先刪除再新增
                    // 未來匯入只有Excel
                    var existExcelData = _projectDataRepository.GetAll().Where(x => x.ImportType == "Excel" || x.ImportType == "CSV").ToList();
                    // 刪除所有是 Excel & CSV 匯入
                    foreach (var item in existExcelData)
                    {
                        _projectDataRepository.Delete(item);
                    }

                    foreach (var item in excelData)
                    {
                        var isWorkFrontExist = _workfrontReportRepository.GetAll().Where(x => x.Name == item.ProjectName);
                        var isProjectDataExist = _projectDataRepository.GetAll().Where(x => x.ProjectName == item.ProjectName);
                        // 比對workfront & 已存在的 projectData 無重複才新增
                        if (!isWorkFrontExist.Any() && !isProjectDataExist.Any())
                        {
                            var importTemp = ConvertToProjectData(item);
                            var splitProjectName = item.ProjectName.Split('-');
                            var mediaType = splitProjectName[splitProjectName.Length - 1];
                            if (importTemp.BrandName == "Dentsu One")
                            {
                                importTemp.MediaType = mediaType;
                                importData.Add(importTemp);
                            }
                            else
                            {
                                badData.Add(ConvertToBadProjectData(item));
                            }
                        }
                    }

                    // 確定新增的取得 ProjectID
                    foreach (var item in importData)
                    {
                        item.ProjectID = GetNewProjectID(item.BrandName);
                    }

                    _projectDataRepository.Create(importData);
                    _badProjectDataRepository.Create(badData);
                    var tempResult = ConvertToProjectDataListResult(importData.AsQueryable());
                    result.AddRange(tempResult);                    
                    #endregion
                }
            }
            catch (Exception ex)
            {

            }

            return result;
        }
        #endregion

        #region 取得新 ProjectID
        public string GetNewProjectID(string brandName)
        {
            var brandData = _brandDataRepository.GetAll().FirstOrDefault(x => x.BrandName == brandName);
            var brandShortName = GetBrandShortName(brandName);
            // 下一年更新年分從0重新開始排編號
            if (brandData.Year != year)
            {
                brandData.Year = year;
                brandData.SeqNo = 0;
            }
            brandData.SeqNo = brandData.SeqNo + 1;
            var seqNo = brandData.SeqNo.ToString().PadLeft(4, '0');
            var result = string.Concat(brandShortName, year, seqNo);
            _brandDataRepository.Update(brandData);
            return result;
        }
        #endregion

        #region 取得 ProjectID 短名
        public string GetBrandShortName(string brandName)
        {
            string sResult = "";

            switch (brandName)
            {              
                case "Dentsu One":
                    sResult = "DO";
                    break;
                case "iProspect":
                    sResult = "Ip";
                    break;              
                default:
                    sResult = brandName;
                    break;
            }

            return sResult;
        }
        #endregion

        #region ConvertMediaType
        public string ConvertMediaType(string mediaType)
        {
            string sResult = "";

            switch (mediaType)
            {
                case "電視":
                    sResult = "0";
                    break;
                case "報紙":
                    sResult = "1";
                    break;
                case "雜誌":
                    sResult = "2";
                    break;
                case "廣播":
                    sResult = "3";
                    break;
                case "網路":
                    sResult = "4";
                    break;
                case "其他":
                    sResult = "5";
                    break;
                case "Plan":
                    sResult = "6";
                    break;
                case "0":
                    sResult = "電視";
                    break;
                case "1":
                    sResult = "報紙";
                    break;
                case "2":
                    sResult = "雜誌";
                    break;
                case "3":
                    sResult = "廣播";
                    break;
                case "4":
                    sResult = "網路";
                    break;
                case "5":
                    sResult = "其他";
                    break;
                case "6":
                    sResult = "Plan";
                    break;
                default:
                    sResult = string.Empty;
                    break;
            }

            return sResult;
        }
        #endregion

        #region ConvertProjectStatus
        public string ConvertProjectStatus(string projectStatus)
        {
            string sResult = "";

            switch (projectStatus)
            {
                case "CUR":
                    sResult = "0";
                    break;
                case "CPL":
                    sResult = "1";
                    break;
                case "0":
                    sResult = "CUR";
                    break;
                case "1":
                    sResult = "CPL";
                    break;
                default:
                    sResult = string.Empty;
                    break;
            }

            return sResult;
        }
        #endregion

        #region ConvertProjectType
        public string ConvertProjectType(string projectType)
        {
            string sResult = "";

            switch (projectType)
            {
                case "Retainer":
                    sResult = "0";
                    break;
                case "Project Statement of Work":
                    sResult = "1";
                    break;
                case "Commission":
                    sResult = "2";
                    break;
                case "Time and Materials":
                    sResult = "3";
                    break;
                case "Internal":
                    sResult = "4";
                    break;
                case "0":
                    sResult = "Retainer";
                    break;
                case "1":
                    sResult = "Project Statement of Work";
                    break;
                case "2":
                    sResult = "Commission";
                    break;
                case "3":
                    sResult = "Time and Materials";
                    break;
                case "4":
                    sResult = "Internal";
                    break;
                default:
                    sResult = string.Empty;
                    break;
            }
            
            return sResult;
        }
        #endregion

        #region ConvertChargeable
        public string ConvertChargeable(string chargeable)
        {
            string sResult = "";

            switch (chargeable)
            {
                case "Chargeable":
                    sResult = "0";
                    break;
                case "Non-Chargeable":
                    sResult = "1";
                    break;               
                case "0":
                    sResult = "Chargeable";
                    break;
                case "1":
                    sResult = "Non-Chargeable";
                    break;               
                default:
                    sResult = string.Empty;
                    break;
            }

            return sResult;
        }
        #endregion

        #region GetGroupAndLegal
        public BrandDataViewModel GetGroupAndLegal(string brandName)
        {
            var result = _brandDataRepository.GetAll().FirstOrDefault(x => x.BrandName == brandName);

            return (BrandDataViewModel)result;
        }
        #endregion

        #region GetAll
        public List<ExportCSVModel> GetAll()
        {
            var result = new List<ExportCSVModel>();

            var projectData = _projectDataRepository.GetAll().ToList();
            var nonChargeableData = _nonChargeableRepository.GetAll().ToList();
            var tempResult = ConvertToExportCSVModel(projectData, nonChargeableData);
            result.AddRange(tempResult);

            return result;
        }
        #endregion

        #region ConvertToExportCSVModel
        public List<ExportCSVModel> ConvertToExportCSVModel(List<ProjectData> projectData, List<NonChargeable> nonChargeableData)
        {
            var result = new List<ExportCSVModel>();
            var tempPro = (from x in projectData
                           select new ExportCSVModel
                           {
                               ProjectName = x.ProjectName,
                               PlannedStartDate = x.StartDate,
                               PlannedCompletionDate = x.CompleteDate,
                               ProjectDescription = x.Description,
                               ProjectStatus = x.ProjectStatus,
                               ProjectOwnerFederationID = x.ProjectOwnerID,
                               ProjectOwnerEmailAddress = x.OwnerEmail,
                               PortfolioName = x.PortfolioName,
                               PortfolioOwnerFederationID = x.PortfolioOwnerID,
                               ProgramName = x.ProgramName,
                               ProgramOwnerFederationID = x.ProgramOwnerID,
                               Currency = x.CurrencyINR,
                               Budget = x.Budget,
                               PlannedBenefit = x.Benefit,
                               ClientName = x.ClientName,
                               LineofBusiness = x.LineofBusiness,
                               Region = x.Region,
                               Brand = x.BrandName,
                               Market = x.Market,
                               Office = x.Office,
                               ChargeablevsNonChargeable = x.Chargeable,
                               ProjectType = x.ProjectType,
                               GroupName = x.GroupName,
                               AccountingProjectID = x.AccProjID,
                               LegalEntity = x.LegalEntity,
                               FinanceSourceSystem = x.FinSourSys,
                               CRMURNID = x.CRMURNID,
                               CRMSourceSystem = x.CRMSourSys,
                               OtherSourceSystem = x.OtherSource,
                               AdditionalProjectID = x.ProjectID,
                               RecordStatus = x.RecordStatus,
                           }).ToList();

            var tempNon = (from x in nonChargeableData
                           select new ExportCSVModel
                           {
                               ProjectName = x.ProjectName,
                               PlannedStartDate = x.StartDate,
                               PlannedCompletionDate = x.CompleteDate,
                               ProjectDescription = x.Description,
                               ProjectStatus = x.ProjectStatus,
                               ProjectOwnerFederationID = x.ProjectOwnerID,
                               ProjectOwnerEmailAddress = x.OwnerEmail,
                               PortfolioName = x.PortfolioName,
                               PortfolioOwnerFederationID = x.PortfolioOwnerID,
                               ProgramName = x.ProgramName,
                               ProgramOwnerFederationID = x.ProgramOwnerID,
                               Currency = x.CurrencyINR,
                               Budget = x.Budget,
                               PlannedBenefit = x.Benefit,
                               ClientName = x.ClientName,
                               LineofBusiness = x.LineofBusiness,
                               Region = x.Region,
                               Brand = x.BrandName,
                               Market = x.Market,
                               Office = x.Office,
                               ChargeablevsNonChargeable = x.Chargeable,
                               ProjectType = x.ProjectType,
                               GroupName = x.GroupName,
                               AccountingProjectID = x.AccProjID,
                               LegalEntity = x.LegalEntity,
                               FinanceSourceSystem = x.FinSourSys,
                               CRMURNID = x.CRMURNID,
                               CRMSourceSystem = x.CRMSourSys,
                               OtherSourceSystem = x.OtherSource,
                               AdditionalProjectID = x.ProjectID,
                               RecordStatus = x.RecordStatus,
                           }).ToList();

            result.AddRange(tempPro);
            result.AddRange(tempNon);

            return result;
        }
        #endregion

    }
}
