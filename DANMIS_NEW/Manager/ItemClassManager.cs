#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 04/28/2021 16:57:26
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;
using DANMIS_NEW.Interface;
using DANMIS_NEW.Models;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using ResourceLibrary;
using System.Web.Mvc;

namespace DANMIS_NEW.Manager
{
    public class ItemClassManager : IItemClassManager
    {
        readonly IItemClassRepository _itemClassRepository;

        public ItemClassManager(IItemClassRepository itemClassRepository)
        {
            _itemClassRepository = itemClassRepository;
        }

        /// <summary>
        /// 建立 ItemClass
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(ItemClassViewModel entity)
        {
            var item = (ItemClass)entity;

            using (var transaction = _itemClassRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    _itemClassRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 ItemClass
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _itemClassRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _itemClassRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _itemClassRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 ItemClass
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ItemClassViewModel GetByID(Guid id)
        {
            var item = _itemClassRepository.GetByID(id);
            var result = (ItemClassViewModel)item;

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<ItemClassListResult> Paging(ItemClassSearchModel searchModel)
        {
            // 預設集合
            var temp = _itemClassRepository.GetAll();

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new ItemClassListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 ClassName = x.ClassName,
                                 Order = x.Order,
                                 IsForUser = x.IsForUser,
                                 IsEnable = x.IsEnable,
                                 UpdateUser = x.UpdateUser,
                                 UpdateTime = x.UpdateTime,
                             };

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.ClassName.Contains(search) ||
                    x.UpdateUser.Contains(search) ||
                    false);
            }

            // 進行分頁處理
            var result = new Paging<ItemClassListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            return result;
        }

        /// <summary>
        /// 更新 ItemClass
        /// </summary>
        /// <param name="entity"></param>
        public void Update(ItemClassViewModel entity)
        {
            using (var transaction = _itemClassRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _itemClassRepository.GetByID(entity.ID);
                    source.ClassName = entity.ClassName ?? string.Empty;
                    source.Order = entity.Order;
                    source.IsForUser = entity.IsForUser;
                    source.IsEnable = entity.IsEnable;
                    source.UpdateUser = entity.UpdateUser ?? string.Empty;
                    source.UpdateTime = entity.UpdateTime;

                    _itemClassRepository.Update(source);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        public SelectList GetSelectList()
        {
            // 預設集合
            var temp = _itemClassRepository.GetAll();

            // 將 DB 資料轉換為列表頁呈現資料
            var _tempResult = from x in temp
                              select new ItemClassListResult
                              {
                                  SequenceNo = x.SequenceNo,
                                  ID = x.ID,
                                  ClassName = x.ClassName,
                                  Order = x.Order,
                                  IsForUser = x.IsForUser,
                                  IsEnable = x.IsEnable,
                                  UpdateUser = x.UpdateUser,
                                  UpdateTime = x.UpdateTime,
                              };

            // 進行分頁處理
            var tempResult = new Paging<ItemClassListResult>();
            tempResult.total = _tempResult.Count();
            tempResult.rows = _tempResult.OrderBy("Order", "asc").ToList();

            var list = new List<SelectListItem>();
            foreach (var item in tempResult.rows)
            {
                list.Add(new SelectListItem { Value = item.ID.ToString(), Text = item.ClassName });
            }
            var result = new SelectList(list, "Value", "Text");

            return result;
        }
    }
}
#pragma warning restore 1591