#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 03/04/2021 15:24:31
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;
using DANMIS_NEW.Interface;
using DANMIS_NEW.Models;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using ResourceLibrary;
using Excel = Microsoft.Office.Interop.Excel;       //microsoft Excel 14 object in references-> COM tab
using System.Runtime.InteropServices;
using System.Threading.Tasks;

namespace DANMIS_NEW.Manager
{
    public class WorkfrontReportManager : IWorkfrontReportManager
    {
        readonly IWorkfrontReportRepository _workfrontReportRepository;
        readonly IWorkfrontImportRepository _workfrontImportRepository;

        public WorkfrontReportManager(IWorkfrontReportRepository workfrontReportRepository, IWorkfrontImportRepository workfrontImportRepository)
        {
            _workfrontReportRepository = workfrontReportRepository;
            _workfrontImportRepository = workfrontImportRepository;
        }

        /// <summary>
        /// 建立 WorkfrontReport
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(WorkfrontReportViewModel entity)
        {
            var item = (WorkfrontReport)entity;

            using (var transaction = _workfrontReportRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    _workfrontReportRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 WorkfrontReport
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _workfrontReportRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _workfrontReportRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _workfrontReportRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 WorkfrontReport
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public WorkfrontReportViewModel GetByID(Guid id)
        {
            var item = _workfrontReportRepository.GetByID(id);
            var result = (WorkfrontReportViewModel)item;

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<WorkfrontReportListResult> Paging(WorkfrontReportSearchModel searchModel)
        {
            var isChargeable = searchModel.IsChargeable == "0" ? "Chargeable" : searchModel.IsChargeable == "1" ? "Non-Chargeable" : null;
            var projectStatus = searchModel.Status == "0" ? "Complete" : searchModel.Status == "1" ? "Cancelled" : searchModel.Status == "2" ? "Planning" :
                                searchModel.Status == "3" ? "In Progress" : null;

            var projectType = searchModel.ProjectType == "0" ? "Retainer" : searchModel.ProjectType == "1" ? "Project Statement of Work" : searchModel.ProjectType == "2" ? "Commission" :
                              searchModel.ProjectType == "3" ? "Time and Materials" : searchModel.ProjectType == "4" ? "Internal" : null;
            

            // 預設集合
            var temp = _workfrontReportRepository.GetAll();

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new WorkfrontReportListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 Name = x.Name,
                                 Owner = x.Owner,
                                 Status = x.Status,
                                 GroupName = x.GroupName,
                                 IsChargeable = x.IsChargeable,
                                 ProjectType = x.ProjectType,
                                 ProjectID = x.ProjectID,
                                 UpdateUser = x.UpdateUser,
                                 UpdateTime = x.UpdateTime,
                             };

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.Name.Contains(search) ||
                    x.Owner.Contains(search) ||
                    x.Status.Contains(search) ||
                    x.GroupName.Contains(search) ||
                    x.IsChargeable.Contains(search) ||
                    x.ProjectType.Contains(search) ||
                    x.ProjectID.Contains(search) ||
                    x.UpdateUser.Contains(search) ||
                    false);
            }

            if (searchModel.StartDate != null)
            {
                var startDate = searchModel.StartDate;
                var endDate = searchModel.StartDate.Value.AddDays(1);
                tempResult = tempResult.Where(x =>
                    (x.UpdateTime >= startDate &&
                     x.UpdateTime <= endDate) ||
                    false);
            }
            if (!string.IsNullOrWhiteSpace(isChargeable))
                tempResult = tempResult.Where(x =>                    
                    x.IsChargeable == isChargeable ||
                    false);
            if (!string.IsNullOrWhiteSpace(projectStatus))
                tempResult = tempResult.Where(x =>
                    x.Status == projectStatus ||
                    false);
            if (!string.IsNullOrWhiteSpace(projectType))
                tempResult = tempResult.Where(x =>
                    x.ProjectType == projectType ||
                    false);

            // 進行分頁處理
            var result = new Paging<WorkfrontReportListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            return result;
        }

        /// <summary>
        /// 更新 WorkfrontReport
        /// </summary>
        /// <param name="entity"></param>
        public void Update(WorkfrontReportViewModel entity)
        {
            using (var transaction = _workfrontReportRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _workfrontReportRepository.GetByID(entity.ID);
                    source.Name = entity.Name ?? string.Empty;
                    source.Owner = entity.Owner ?? string.Empty;
                    source.Status = entity.Status ?? string.Empty;
                    source.GroupName = entity.GroupName ?? string.Empty;
                    source.IsChargeable = entity.IsChargeable ?? string.Empty;
                    source.ProjectType = entity.ProjectType ?? string.Empty;
                    source.ProjectID = entity.ProjectID ?? string.Empty;
                    source.UpdateUser = entity.UpdateUser ?? string.Empty;
                    source.UpdateTime = entity.UpdateTime;

                    _workfrontReportRepository.Update(source);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        #region getReportExcelFile 
        public List<WorkfrontReport> getReportExcelFile(string path, string user)
        {

            var temp = new List<WorkfrontReport>();
            //Create COM Objects. Create a COM object for everything that is referenced
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(path);
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            Excel.Range xlRange = xlWorksheet.UsedRange;

            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;

            //iterate over the rows and columns and print to the console as it appears in the file
            //excel is not zero based!!
            for (int i = 1; i <= rowCount; i++)
            {
                var _temp = new WorkfrontReport();
                var cell1 = string.Empty;
                var cell2 = string.Empty;
                var cell3 = string.Empty;
                var cell4 = string.Empty;
                var cell5 = string.Empty;
                var cell6 = string.Empty;
                var cell7 = string.Empty;

                for (int j = 1; j <= colCount; j++)
                {
                    if (i > 1)
                    {

                        //new line
                        if (j == 1)
                            Console.Write("\r\n");

                        //write the value to the console
                        if (xlRange.Cells[i, j] != null && xlRange.Cells[i, j].Value2 != null)
                            Console.Write(xlRange.Cells[i, j].Value2.ToString() + "\t");

                        var cell = xlRange.Cells[i, j];
                        if (j == 1)
                            cell1 = cell.text;
                        if (j == 2)
                            cell2 = cell.text;
                        if (j == 3)
                            cell3 = cell.text;
                        if (j == 4)
                            cell4 = cell.text;
                        if (j == 5)
                            cell5 = cell.text;
                        if (j == 6)
                            cell6 = cell.text;
                        if (j == 7)
                            cell7 = cell.text;

                    }
                }
                if (!string.IsNullOrWhiteSpace(cell1))
                {
                    _temp.ID = Guid.NewGuid();
                    _temp.Name = cell1;
                    _temp.Owner = cell2;
                    _temp.Status = cell3;
                    _temp.GroupName = cell4;
                    _temp.IsChargeable = cell5;
                    _temp.ProjectType = cell6;
                    _temp.ProjectID = cell7;
                    _temp.CreateUser = user;
                    _temp.CreateTime = DateTime.Now;
                    _temp.UpdateUser = user;
                    _temp.UpdateTime = DateTime.Now;
                    temp.Add(_temp);
                }
            }

            //cleanup
            GC.Collect();
            GC.WaitForPendingFinalizers();

            //rule of thumb for releasing com objects:
            //  never use two dots, all COM objects must be referenced and released individually
            //  ex: [somthing].[something].[something] is bad

            //release com objects to fully kill excel process from running in the background
            Marshal.ReleaseComObject(xlRange);
            Marshal.ReleaseComObject(xlWorksheet);

            //close and release
            xlWorkbook.Close();
            Marshal.ReleaseComObject(xlWorkbook);

            //quit and release
            xlApp.Quit();
            Marshal.ReleaseComObject(xlApp);

            return temp;
        }
        #endregion

        #region inertResult WorkfrontReport => 刪除再新增、WorkfrontImport => 照日期新增
        public void insertResult(List<WorkfrontReport> reportData)
        {
            try
            {
                var allData = _workfrontReportRepository.GetAll().ToList();

                #region Report 只保留最新                
                if (reportData.Any())
                {
                    foreach (var item in allData)
                    {
                        _workfrontReportRepository.Delete(item);
                    }
                                        
                    _workfrontReportRepository.Create(reportData);
                }
                #endregion

                #region Import 直接新增
                var importData = (from x in reportData
                                  select new WorkfrontImport()
                                  {
                                      ID = x.ID,
                                      SequenceNo = x.SequenceNo,
                                      Name = x.Name,
                                      Status = x.Status,
                                      GroupName = x.GroupName,
                                      ProjectID = x.ProjectID,
                                      Owner = x.Owner,
                                      IsChargeable = x.IsChargeable,
                                      ProjectType = x.ProjectType,
                                      CreateTime = x.CreateTime,
                                      CreateUser = x.CreateUser,
                                      UpdateTime = x.UpdateTime,
                                      UpdateUser = x.UpdateUser,
                                  }).ToList();

                if (importData.Any())
                    _workfrontImportRepository.Create(importData);
                #endregion
            }
            catch (Exception ex)
            { 
            
            }
        } 
        #endregion
    }
}
#pragma warning restore 1591