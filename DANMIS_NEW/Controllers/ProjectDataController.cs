#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 03/04/2021 15:24:10
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NLog;
using ResourceLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using Utilities;
using Utilities.Attribute;
using Utilities.Utility;
using DANMIS_NEW.Interface;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using System.IO;
using DANMIS_NEW.Models;
using System.Web;
using System.Reflection;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Globalization;

namespace DANMIS_NEW.Controllers
{
    public class ProjectDataController : BaseController
    {
        public const string tableType = "ProjectData";
        public const string uploadPath = "~/Content/Uploads/ProjectData/";
        public const string exportPath = "~/Content/Exports/ProjectData/";

        readonly ICommonManager _commonManager;
        readonly IProjectDataManager _projectDataManager;
        readonly IBadProjectDataManager _badProjectDataManager;
        readonly IFileAttachedRepository _fileAttachedRepository;
        readonly INonChargeableManager _nonChargeableManager;        

        public ProjectDataController(
            ICommonManager commonManager,
            IProjectDataManager projectDataManager,
            IBadProjectDataManager badProjectDataManager,
            IFileAttachedRepository fileAttachedRepository,
            INonChargeableManager nonChargeableManager)
        {
            _commonManager = commonManager;
            _projectDataManager = projectDataManager;
            _badProjectDataManager = badProjectDataManager;
            _fileAttachedRepository = fileAttachedRepository;
            _nonChargeableManager = nonChargeableManager;
            logger = LogManager.GetCurrentClassLogger();
        }

        /// <summary>
        /// 首頁
        /// </summary>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Index()
        {
            // 初始化查詢物件
            var searchModel = new ProjectDataSearchModel();
            if (null != UnobtrusiveSession.Session["QueryModel"])
            {
                // 查詢條件存在 session 則取出
                var temp = UnobtrusiveSession.Session["QueryModel"] as ProjectDataSearchModel;
                if (null != temp)
                {
                    searchModel = temp;
                }
            }
            searchModel._Status = _commonManager.GetOptionList("PProjectStatus");
            searchModel._IsChargeable = _commonManager.GetOptionList("IsChargeable");
            searchModel._ProjectType = _commonManager.GetOptionList("ProjectType");

            searchModel.BadProjectData = _badProjectDataManager.GetAll();            
            //var todayCount = _projectDataManager.CheckTodayDataExist(searchModel);
            //if(todayCount == 0)
            //    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = "今天還沒有將Workfront回傳的專案資料匯入系統，無法轉資料！" }.ToString();

            return View(searchModel);
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        [WebAuthorize(Code = "ProjectDataIndex")]
        [HttpPost]
        public ActionResult Paging(ProjectDataSearchModel searchModel)
        {
            // 查詢條件儲存於 session
            UnobtrusiveSession.Session["QueryModel"] = searchModel;
            // 查詢結果物件初始化
            var result = new Paging<ProjectDataListResult> { total = 0, rows = null };
            // 查詢
            try
            {
                result = _projectDataManager.Paging(searchModel);
            }
            catch (Exception ex)
            {
                logger.Error(ex, string.Format(Resource.PagingError, Resource.ProjectData));
            }

            return Json(result);
        }

        /// <summary>
        /// 檢視 ProjectData 頁面
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Details(Guid? id)
        {
            ProjectDataViewModel viewModel = null;
            if (id.HasValue && id.Value != Guid.Empty)
            {
                try
                {
                    // 讀取資料
                    viewModel = _projectDataManager.GetByID(id.Value);
                    var a = UserName;
                    if (null == viewModel)
                    {
                        // 查無資料
                        logger.Error(string.Format(Resource.NoData, Resource.ProjectData, id.Value));
                        TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.NoData, Resource.ProjectData, id.Value) }.ToString();
                    }
                }
                catch (Exception ex)
                {
                    // 查詢發生錯誤
                    logger.Error(ex, string.Format(Resource.GetDetailsDataError, Resource.ProjectData, id.Value));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.GetDetailsDataError, Resource.ProjectData, id.Value) }.ToString();
                }
            }
            else
            {
                // 參數錯誤
                logger.Error(string.Format(Resource.ParamError, Resource.Details));
                TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ParamError, Resource.Details) }.ToString();
            }
            // 查無資料轉回列表頁
            if (null == viewModel)
            {
                return RedirectToAction("Index");
            }
            // 初始化檢視頁面下拉選單
            setDropDownList(ref viewModel);

            return View(viewModel);
        }

        /// <summary>
        /// 新增 ProjectData 頁面
        /// </summary>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Create()
        {
            var viewModel = new ProjectDataViewModel();
            viewModel.ImportDate = DateTime.Now;
            // 初始化編輯頁面下拉選單
            setDropDownList(ref viewModel);

            viewModel.StartDate = string.Concat(DateTime.Now.Year, "/01", "/01");
            viewModel.CompleteDate = string.Concat(DateTime.Now.Year, "/06", "/31");
            viewModel.Chargeable = "0";

            return View(viewModel);
        }

        /// <summary>
        /// 新增資料儲存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpPost]
        public ActionResult Create(ProjectDataViewModel viewModel)
        {
            // 驗證
            if (ModelState.IsValid)
            {
                try
                {
                    viewModel.ID = Guid.NewGuid();                    
                    _projectDataManager.Create(viewModel);

                    UnobtrusiveSession.Session["QueryModel"] = null;
                    // 完成
                    TempData["ErrorMsg"] = new JsonMessage { Style = "success", Message = string.Format(Resource.ExecutionCompleted, Resource.Create, Resource.ProjectData) }.ToString();
                    // 轉回列表頁
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    // 儲存發生錯誤
                    logger.Error(ex, string.Format(Resource.ExecutionFailedWithID, Resource.Create, Resource.ProjectData, viewModel.ID));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ExecutionFailedWithID, Resource.Create, Resource.ProjectData, viewModel.ID) }.ToString();
                }
            }
            // 初始化新增頁面下拉選單
            setDropDownList(ref viewModel);

            return View(viewModel);
        }

        /// <summary>
        /// 修改 ProjectData 頁面
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Edit(Guid? id)
        {
            ProjectDataViewModel viewModel = null;
            if (id.HasValue && id.Value != Guid.Empty)
            {
                try
                {
                    // 讀取資料
                    viewModel = _projectDataManager.GetByID(id.Value);
                    if (null == viewModel)
                    {
                        // 查無資料
                        logger.Error(string.Format(Resource.NoData, Resource.ProjectData, id.Value));
                        TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.NoData, Resource.ProjectData, id.Value) }.ToString();
                    }
                }
                catch (Exception ex)
                {
                    // 查詢發生錯誤
                    logger.Error(ex, string.Format(Resource.GetEditDataError, Resource.ProjectData, id.Value));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.GetEditDataError, Resource.ProjectData, id.Value) }.ToString();
                }
            }
            else
            {
                // 參數錯誤
                logger.Error(string.Format(Resource.ParamError, Resource.Edit));
                TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ParamError, Resource.Edit) }.ToString();
            }
            // 查無資料轉回列表頁
            if (null == viewModel)
            {
                return RedirectToAction("Index");
            }
            // 初始化編輯頁面下拉選單
            setDropDownList(ref viewModel);

            return View("Create", viewModel);
        }

        /// <summary>
        /// 編輯資料儲存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpPost]
        public ActionResult Edit(ProjectDataViewModel viewModel)
        {
            // 驗證
            if (ModelState.IsValid)
            {
                try
                {
                    _projectDataManager.Update(viewModel);
                    // 完成
                    TempData["ErrorMsg"] = new JsonMessage { Style = "success", Message = string.Format(Resource.ExecutionCompleted, Resource.Edit, Resource.ProjectData) }.ToString();
                    // 轉回列表頁
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    // 儲存發生錯誤
                    logger.Error(ex, string.Format(Resource.ExecutionFailedWithID, Resource.Edit, Resource.ProjectData, viewModel.ID));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ExecutionFailedWithID, Resource.Edit, Resource.ProjectData, viewModel.ID) }.ToString();
                }
            }
            // 初始化編輯頁面下拉選單
            setDropDownList(ref viewModel);

            return View("Create", viewModel);
        }

        /// <summary>
        /// 刪除機構資料
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpPost]
        public ActionResult Delete(List<Guid> id)
        {
            // 預設失敗
            var result = false;
            // id 有值進行刪除作業
            if (id != null && id.Any())
            {
                try
                {
                    // 進行刪除
                    _projectDataManager.Delete(id);
                    result = true;
                }
                catch (Exception ex)
                {
                    // 刪除失敗
                    logger.Error(ex, string.Format(Resource.ExecutionFailed, Resource.Delete, Resource.ProjectData, id));
                }
            }

            return Json(result);
        }

        /// <summary>
        /// 設定頁面所需要的下拉選單資料
        /// </summary>
        /// <param name="viewModel"></param>
        void setDropDownList(ref ProjectDataViewModel viewModel)
        {
            viewModel.MediaTypeList = _commonManager.GetOptionList("MediaType");
            viewModel.ProjectTypeList = _commonManager.GetOptionList("ProjectType");
            viewModel.ProjectStatusList = _commonManager.GetOptionList("PProjectStatus");
            viewModel.BrandList = _commonManager.GetBrandList();
            viewModel.ChargeableList = _commonManager.GetOptionList("IsChargeable");
        }

        [HttpPost]
        public ActionResult CheckTodayDataExist(ProjectDataSearchModel data)
        {
            try
            {
                var result = _projectDataManager.CheckTodayDataExist(data);

                if(result != 0)
                    return Json(true);

                return Json(false);
            }
            catch
            {
                return Json(new { result = false, message = "錯誤" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult ImportProjectData(ProjectDataSearchModel data)
        {
            var result = new JsonResult();
            result = Json(new { result = true, message = "今天還沒有將Workfront回傳的專案資料匯入系統，無法轉資料" }, JsonRequestBehavior.AllowGet);

            try
            {
                var _result = _projectDataManager.CheckTodayDataExist(data);

                if (_result != 0)
                {
                    var tempResult = _projectDataManager.CheckDataExist(data);
                    result = Json(new { result = true, message = "轉入成功" }, JsonRequestBehavior.AllowGet);
                    
                }
                
                return result;
            }
            catch
            {
                return Json(new { result = false, message = "錯誤" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult UploadFiles()
        {
            var result = new JsonResult();
            if (Request.Files.Count > 0)
            {
                try
                {
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        HttpPostedFileBase file = files[i];
                        string fname;

                        // Checking for Internet Explorer  
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                        }
                        else
                        {
                            fname = file.FileName;
                        }

                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath(uploadPath), fname);
                        file.SaveAs(fname);
                        var extension = file.FileName.Split('.')[1];

                        var excelFile = new FileAttached()
                        {
                            ID = Guid.NewGuid(),
                            ParentID = Guid.NewGuid(),
                            TableType = tableType,
                            ItemType = string.Empty,
                            FileName = file.FileName,
                            FileExtension = extension ?? string.Empty,
                            FilePath = fname,
                            FileSize = file.ContentLength,
                            IsImageFile = false,
                            IsThumbImage = false,
                            Description = string.Empty,
                            CreateTime = DateTime.Now,
                            UpdateTime = DateTime.Now
                        };

                        _fileAttachedRepository.Create(excelFile);

                        var reportData = new List<ProjectDataListResult>();

                        if (extension == "xlsx" || extension == "xls")
                        {
                            reportData = _projectDataManager.getExcelFile(fname, UserName);
                        }
                        else if (extension == "csv")
                        {
                            reportData = _projectDataManager.getCSVFile(fname, UserName);
                        }
                        if (reportData.Any())
                        {
                            var data = _projectDataManager.insertResult(reportData);
                            if(data.Any())
                                result = Json(new { result = true, message = "匯入成功" }, JsonRequestBehavior.AllowGet);
                            else
                                result = Json(new { result = true, message = "匯入資料已存在或無匯入資料" }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            result = Json(new { result = true, message = "無匯入資料" }, JsonRequestBehavior.AllowGet);
                        }
                    }

                }
                catch (Exception ex)
                {
                    logger.Error(ex, string.Format(Resource.PagingError, Resource.WorkfrontReport));
                    result = Json(new { result = false, message = "匯入失敗" }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                result = Json(new { result = false, message = "無匯入檔案" }, JsonRequestBehavior.AllowGet);
            }

            return result;
        }

   
        [HttpGet]
        public ActionResult GetBadData()
        {
            var tempResult = _badProjectDataManager.GetAll().ToList().ConvertAll(e => (BadProjectDataViewModel)e);
            var result = Json(new { total = tempResult.Count, rows = tempResult }, JsonRequestBehavior.AllowGet);

            return result;
        }



        [HttpPost]
        public ActionResult GetGroupAndLegal(ProjectDataViewModel viewModel)
        {
            var result = new JsonResult();
            result = Json(new { groupName = string.Empty, legalEntity = string.Empty, message = "查無資料" }, JsonRequestBehavior.AllowGet);

            try
            {
                var _result = _projectDataManager.GetGroupAndLegal(viewModel.BrandName);

                if (!string.IsNullOrEmpty(_result.GroupName) || !string.IsNullOrEmpty(_result.EntityCode))
                {                    
                    result = Json(new { groupName = _result.GroupName, legalEntity = _result.EntityCode, message = "Success" }, JsonRequestBehavior.AllowGet);

                }

                return result;
            }
            catch
            {
                return Json(new { result = false, message = "Error" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult ExportCSV(ProjectDataSearchModel searchModel)
        {
            var result = new JsonResult();
            result = Json(new { groupName = string.Empty, legalEntity = string.Empty, message = "no Data" }, JsonRequestBehavior.AllowGet);

            try
            {
                List<ExportCSVModel> exportData = _projectDataManager.GetAll();


                CSVGenerator<ExportCSVModel>(true, exportPath, exportData);

                result = Json(new { result = true, message = "Export Success" }, JsonRequestBehavior.AllowGet);
            }
            catch(Exception ex)
            {
                return Json(new { result = false, message = "Error" }, JsonRequestBehavior.AllowGet);
            }
            return result;
        }

        /// <summary>
        /// CSV Generator
        /// </summary>
        /// <param name="genColumn">output data property name</param>
        /// <param name="FilePath">target CSV path</param>
        /// <param name="data"> List of T</param>
        void CSVGenerator<T>(bool genColumn, string FilePath, List<T> data)
        {
            var _path = string.Concat(FilePath, "FTP_Upload_", DateTime.Now.ToString("yyyy-MM-dd"), ".csv");
            var path = Path.Combine(Server.MapPath(_path));
            Encoding utf8 = Encoding.UTF8;
            CultureInfo cultureInfo = new CultureInfo("zh-TW");
            // Create the file, or overwrite if the file exists.
            using (FileStream fs = System.IO.File.Create(path))
            {
                StreamWriter sw = new StreamWriter(fs);
                Type t = typeof(T);
                PropertyInfo[] propInfos = t.GetProperties();
                if (genColumn)
                {
                    foreach (var item in propInfos)
                    {
                        // Test
                        var e = item.CustomAttributes.FirstOrDefault();
                        var f = e.NamedArguments.Select(i => i.TypedValue).FirstOrDefault();
                        var c = item.PropertyType;
                        var d = item.Attributes;
                    }
                    sw.WriteLine(string.Join("|", propInfos.Select(i => i.CustomAttributes.FirstOrDefault().NamedArguments.FirstOrDefault().TypedValue.ToString().Replace(@"""", ""))));
                }
                foreach (var item in data)
                {                    
                    sw.WriteLine(string.Join("|", propInfos.Select(i => i.GetValue(item))));
                }
                sw.Close();
            }
        }

    }
}
#pragma warning restore 1591