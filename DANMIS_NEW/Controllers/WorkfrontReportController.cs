#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 03/04/2021 15:24:10
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NLog;
using ResourceLibrary;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using Utilities;
using Utilities.Attribute;
using Utilities.Utility;
using DANMIS_NEW.Interface;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using DANMIS_NEW.Models;
using System.Threading.Tasks;
using System.Web;
using System.IO;

namespace DANMIS_NEW.Controllers
{
    public class WorkfrontReportController : BaseController
    {
        public const string tableType = "WorkfrontReport";
        public const string uploadPath = "~/Content/Uploads/WorkfrontReport/";

        readonly ICommonManager _commonManager;
        readonly IWorkfrontReportManager _workfrontReportManager;
        readonly IFileAttachedRepository _fileAttachedRepository;
        public WorkfrontReportController(
            ICommonManager commonManager,
            IWorkfrontReportManager workfrontReportManager,
            IFileAttachedRepository fileAttachedRepository)
        {
            _commonManager = commonManager;
            _workfrontReportManager = workfrontReportManager;
            _fileAttachedRepository = fileAttachedRepository;
            logger = LogManager.GetCurrentClassLogger();
        }

        /// <summary>
        /// 首頁
        /// </summary>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Index()
        {
            // 初始化查詢物件
            var searchModel = new WorkfrontReportSearchModel();
            if (null != UnobtrusiveSession.Session["QueryModel"])
            {
                // 查詢條件存在 session 則取出
                var temp = UnobtrusiveSession.Session["QueryModel"] as WorkfrontReportSearchModel;
                if (null != temp)
                {
                    searchModel = temp;
                }
            }
            searchModel._Status = _commonManager.GetOptionList("ProjectStatus");
            searchModel._IsChargeable = _commonManager.GetOptionList("IsChargeable");
            searchModel._ProjectType = _commonManager.GetOptionList("ProjectType");

            return View(searchModel);
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        [WebAuthorize(Code = "WorkfrontReportIndex")]
        [HttpPost]
        public ActionResult Paging(WorkfrontReportSearchModel searchModel)
        {
            // 查詢條件儲存於 session
            UnobtrusiveSession.Session["QueryModel"] = searchModel;
            // 查詢結果物件初始化
            var result = new Paging<WorkfrontReportListResult> { total = 0, rows = null };
            // 查詢
            try
            {
                #region 處理上傳多檔案
                //var ID = Guid.NewGuid();
                //fileAttachedHandler(this, searchModel, ID, uploadPath, tableType);
                //string extension = searchModel.NewAttachedFiles.FirstOrDefault()?.FileExtension ?? string.Empty;
                //var reportData = new List<WorkfrontReport>();
                //var importData = new List<WorkfrontImport>();
                //if (extension == ".xlsx" || extension == ".xls")
                //{
                //    reportData = _workfrontReportManager.getReportExcelFile(Server.MapPath(string.Concat("~", searchModel.NewAttachedFiles.FirstOrDefault().FilePath)), UserName);
                //}
                //_workfrontReportManager.insertResult(reportData);
                #endregion

                result = _workfrontReportManager.Paging(searchModel);
            }
            catch (Exception ex)
            {
                logger.Error(ex, string.Format(Resource.PagingError, Resource.WorkfrontReport));
            }

            return Json(result);
        }

        /// <summary>
        /// 檢視 WorkfrontReport 頁面
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Details(Guid? id)
        {
            WorkfrontReportViewModel viewModel = null;
            if (id.HasValue && id.Value != Guid.Empty)
            {
                try
                {
                    // 讀取資料
                    viewModel = _workfrontReportManager.GetByID(id.Value);
                    if (null == viewModel)
                    {
                        // 查無資料
                        logger.Error(string.Format(Resource.NoData, Resource.WorkfrontReport, id.Value));
                        TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.NoData, Resource.WorkfrontReport, id.Value) }.ToString();
                    }
                }
                catch (Exception ex)
                {
                    // 查詢發生錯誤
                    logger.Error(ex, string.Format(Resource.GetDetailsDataError, Resource.WorkfrontReport, id.Value));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.GetDetailsDataError, Resource.WorkfrontReport, id.Value) }.ToString();
                }
            }
            else
            {
                // 參數錯誤
                logger.Error(string.Format(Resource.ParamError, Resource.Details));
                TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ParamError, Resource.Details) }.ToString();
            }
            // 查無資料轉回列表頁
            if (null == viewModel)
            {
                return RedirectToAction("Index");
            }
            // 初始化檢視頁面下拉選單
            setDropDownList(ref viewModel);

            return View(viewModel);
        }

        /// <summary>
        /// 新增 WorkfrontReport 頁面
        /// </summary>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Create()
        {
            var viewModel = new WorkfrontReportViewModel();
            // 初始化編輯頁面下拉選單
            setDropDownList(ref viewModel);

            return View(viewModel);
        }

        /// <summary>
        /// 新增資料儲存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpPost]
        public ActionResult Create(WorkfrontReportViewModel viewModel)
        {
            // 驗證
            if (ModelState.IsValid)
            {
                try
                {
                    viewModel.ID = Guid.NewGuid();
                    viewModel.CreateUser = UserName;
                    viewModel.CreateTime = NowTime;
                    viewModel.UpdateUser = UserName;
                    viewModel.UpdateTime = NowTime;
                    _workfrontReportManager.Create(viewModel);
                    UnobtrusiveSession.Session["QueryModel"] = null;
                    // 完成
                    TempData["ErrorMsg"] = new JsonMessage { Style = "success", Message = string.Format(Resource.ExecutionCompleted, Resource.Create, Resource.WorkfrontReport) }.ToString();
                    // 轉回列表頁
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    // 儲存發生錯誤
                    logger.Error(ex, string.Format(Resource.ExecutionFailedWithID, Resource.Create, Resource.WorkfrontReport, viewModel.ID));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ExecutionFailedWithID, Resource.Create, Resource.WorkfrontReport, viewModel.ID) }.ToString();
                }
            }
            // 初始化新增頁面下拉選單
            setDropDownList(ref viewModel);

            return View(viewModel);
        }

        /// <summary>
        /// 修改 WorkfrontReport 頁面
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpGet]
        public ActionResult Edit(Guid? id)
        {
            WorkfrontReportViewModel viewModel = null;
            if (id.HasValue && id.Value != Guid.Empty)
            {
                try
                {
                    // 讀取資料
                    viewModel = _workfrontReportManager.GetByID(id.Value);
                    if (null == viewModel)
                    {
                        // 查無資料
                        logger.Error(string.Format(Resource.NoData, Resource.WorkfrontReport, id.Value));
                        TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.NoData, Resource.WorkfrontReport, id.Value) }.ToString();
                    }
                }
                catch (Exception ex)
                {
                    // 查詢發生錯誤
                    logger.Error(ex, string.Format(Resource.GetEditDataError, Resource.WorkfrontReport, id.Value));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.GetEditDataError, Resource.WorkfrontReport, id.Value) }.ToString();
                }
            }
            else
            {
                // 參數錯誤
                logger.Error(string.Format(Resource.ParamError, Resource.Edit));
                TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ParamError, Resource.Edit) }.ToString();
            }
            // 查無資料轉回列表頁
            if (null == viewModel)
            {
                return RedirectToAction("Index");
            }
            // 初始化編輯頁面下拉選單
            setDropDownList(ref viewModel);

            return View("Create", viewModel);
        }

        /// <summary>
        /// 編輯資料儲存
        /// </summary>
        /// <param name="viewModel"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpPost]
        public ActionResult Edit(WorkfrontReportViewModel viewModel)
        {
            // 驗證
            if (ModelState.IsValid)
            {
                try
                {
                    viewModel.UpdateUser = UserName;
                    viewModel.UpdateTime = NowTime;
                    _workfrontReportManager.Update(viewModel);
                    // 完成
                    TempData["ErrorMsg"] = new JsonMessage { Style = "success", Message = string.Format(Resource.ExecutionCompleted, Resource.Edit, Resource.WorkfrontReport) }.ToString();
                    // 轉回列表頁
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    // 儲存發生錯誤
                    logger.Error(ex, string.Format(Resource.ExecutionFailedWithID, Resource.Edit, Resource.WorkfrontReport, viewModel.ID));
                    TempData["ErrorMsg"] = new JsonMessage { Style = "danger", Message = string.Format(Resource.ExecutionFailedWithID, Resource.Edit, Resource.WorkfrontReport, viewModel.ID) }.ToString();
                }
            }
            // 初始化編輯頁面下拉選單
            setDropDownList(ref viewModel);

            return View("Create", viewModel);
        }

        /// <summary>
        /// 刪除機構資料
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [WebAuthorize]
        [HttpPost]
        public ActionResult Delete(List<Guid> id)
        {
            // 預設失敗
            var result = false;
            // id 有值進行刪除作業
            if (id != null && id.Any())
            {
                try
                {
                    // 進行刪除
                    _workfrontReportManager.Delete(id);
                    result = true;
                }
                catch (Exception ex)
                {
                    // 刪除失敗
                    logger.Error(ex, string.Format(Resource.ExecutionFailed, Resource.Delete, Resource.WorkfrontReport, id));
                }
            }

            return Json(result);
        }

        /// <summary>
        /// 設定頁面所需要的下拉選單資料
        /// </summary>
        /// <param name="viewModel"></param>
        void setDropDownList(ref WorkfrontReportViewModel viewModel)
        {
        }

        [HttpPost]
        public ActionResult UploadFiles()
        {
            var result = new JsonResult();
            if (Request.Files.Count > 0)
            {
                try
                {                    
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {                
                        HttpPostedFileBase file = files[i];
                        string fname;

                        // Checking for Internet Explorer  
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                        }
                        else
                        {
                            fname = file.FileName;                            
                        }

                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath(uploadPath), fname);
                        file.SaveAs(fname);
                        var extension = file.FileName.Split('.')[1];
                        
                        var excelFile = new FileAttached()
                        {
                            ID = Guid.NewGuid(),
                            ParentID = Guid.NewGuid(),
                            TableType = tableType,
                            ItemType = string.Empty,
                            FileName = file.FileName,
                            FileExtension = extension ?? string.Empty,
                            FilePath = fname,
                            FileSize = file.ContentLength,
                            IsImageFile = false,
                            IsThumbImage = false,
                            Description = string.Empty,
                            CreateTime = DateTime.Now,
                            UpdateTime = DateTime.Now
                        };

                        _fileAttachedRepository.Create(excelFile);

                        var reportData = new List<WorkfrontReport>();

                        if (extension == "xlsx" || extension == "xls")
                        {
                            reportData = _workfrontReportManager.getReportExcelFile(fname, UserName);
                        }
                        if (reportData.Any())
                        {
                            _workfrontReportManager.insertResult(reportData);
                            result = Json(new { result = true, message = "匯入成功" }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            result = Json(new { result = true, message = "匯入無資料" }, JsonRequestBehavior.AllowGet);
                        }                        
                    }                    
                    
                }
                catch (Exception ex)
                {
                    logger.Error(ex, string.Format(Resource.PagingError, Resource.WorkfrontReport));
                    result = Json(new { result = false, message = "匯入失敗" }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                result = Json(new { result = false, message = "無匯入檔案" }, JsonRequestBehavior.AllowGet);            
            }

            return result;
        }
    }
}
#pragma warning restore 1591