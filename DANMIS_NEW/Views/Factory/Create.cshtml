@model FactoryViewModel
@{
    var auth = UnobtrusiveSession.Session["Auth"] as IList<Auth>;
    var action = ViewContext.RouteData.Values["action"] as string;
    var function = auth.First(x => x.Code == "Factory" + action);
    ViewBag.Title = function.ModuleName + " / " + function.GroupName + " / " + function.SimpleName;
    var user = UnobtrusiveSession.Session["User"] as UserViewModel;
    var contactPerson = new ContactPersonSearchModel();
}
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/table")
    @*<script src="~/Scripts/table-init.js"></script>*@
    <script>
        $.fn.serializeObject = function () {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function () {
                if (o[this.name]) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };
        
        var data = $('#create_form').serializeObject();
        
        $('#table').bootstrapTable({            
            url: '@Url.Action("_Paging", "Factory")',
            method: 'GET',
            data: JSON.stringify({ 'data': data }),
            striped: true,
            cache: false,
            pagination: true,
            sortable: true,
            sortOrder: "asc",
            sidePagination: "server",
            pageNumber: 1,
            pageList: [10, 25, 50, 100],
            search: false,
            strictSearch: true,
            showColumns: true,
            showRefresh: true,
            minimumCountColumns: 2,
            clickToSelect: true,
            columns: [
                { field: 'Name', title: '聯絡人' },
                { field: 'TEL', title: '電話號碼' },
                { field: 'FAX', title: '傳真號碼' },
                { field: 'CellPhone', title: '手機號碼' },
                { field: 'Email', title: 'Email' },
                { field: 'IsShow', title: '是否顯示' },

            ],
            onLoadSuccess: function (result) {                
            },
            onLoadError: function () {
                alert("ContactPerson數據加載失敗！");
            },

        });

    </script>
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-12">
        <ol class="breadcrumb">
            <li>
                <a href="#">@function.ModuleName</a>
            </li>
            <li>
                @Html.ActionLink(function.GroupName, "Index")
            </li>
            <li class="active">
                <strong>@function.SimpleName</strong>
            </li>
        </ol>
    </div>
</div>
<div class="wrapper wrapper-content animated">
    <div class="row">
        <div class="col-sm-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    @using (Html.BeginForm(action, "Factory", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "create_form", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.SequenceNo)
                        @Html.HiddenFor(model => model.ID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.FactoryShortName, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-2">
                                @Html.EditorFor(model => model.FactoryShortName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FactoryShortName, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.IDNO, htmlAttributes: new { @class = "control-label col-sm-1" })
                            <div class="col-sm-2">
                                @Html.EditorFor(model => model.IDNO, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.IDNO, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.FactoryName, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.FactoryName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FactoryName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FactoryClass, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-2">
                                @Html.DropDownListFor(model => model.FactoryClass, Model._FactoryClass, string.Format(Resource.PleaseSelect, Resource.FactoryClass), new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.FactoryClass, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.IsShow, htmlAttributes: new { @class = "control-label col-sm-1" })
                            <div class="col-sm-2">
                                @Html.DropDownListFor(model => model.IsShow, Model.YesNoList, string.Format(Resource.PleaseSelect, Resource.IsShow), new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.IsShow, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TEL, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-2">
                                @Html.EditorFor(model => model.TEL, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TEL, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.FAX, htmlAttributes: new { @class = "control-label col-sm-1" })
                            <div class="col-sm-2">
                                @Html.EditorFor(model => model.FAX, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FAX, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.Memo, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Memo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Memo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        if (action != "Create")
                        {
                            <div class="form-group">
                                
                                @Html.LabelFor(model => model.ContactPerson, htmlAttributes: new { @class = "control-label col-sm-2" })
                                <div class="col-sm-8">
                                    <table id="table"></table>
                                </div>
                                <button type="submit" id="" class="btn col-sm-offset-2 "><i class="fa fa-plus"></i> 新增聯絡人</button>                                
                            </div>
                            <div class="form-group">                                
                                
                            </div>
                            
                        }
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button type="submit" id="form_submit" class="btn btn-primary"><i class="fa fa-plus"></i> @Resource.Save</button>
                                @*<button type="reset" class="btn btn-default"><i class="fa fa-eraser"></i> @Resource.Reset</button>*@
                                <a id="exit_btn" href="@Url.Action("Index")" class="btn btn-danger"><i class="fa fa-sign-out"></i> @Resource.Exit</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    tr:nth-child(even) {
        background: #CCC
    }

    tr:nth-child(odd) {
        background-color: #FAFAFA;
    }
</style>